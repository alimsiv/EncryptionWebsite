{"version":3,"sources":["bit-handling.js","components/Nav.js","components/shared/page.js","pages/Home.js","pages/About.js","pages/vigenere-page.js","bit-handling-2.js","components/DES.js","components/shared/binary-display.js","components/shared/permutation-table.js","components/shared/utf-display.js","pages/des-page.js","pages/rsa-page.js","pages/md5-page.js","App.js","serviceWorker.js","index.js"],"names":["getBit","binary","index","setBit","original","value","selectionMask","joinPieces","left","right","rightSize","module","exports","bitString","bits","size","string","i","circularLeftShift","amount","Error","leftMostBit","shifted","permutate","table","number","length","makeHalves","leftMask","fromHalves","eachHalf","Nav","className","to","src","alt","type","data-toggle","data-target","id","Page","title","children","contentStyle","rest","style","marginTop","marginBottom","Home","Component","About","React","chars","VigenerePage","props","state","isToggleOn","message","key","result","cipher","cipherKey","clear","useAscii","scrollPos","selectChar","selectKeyChar","selectResultChar","selectCharInt","selectKeyCharInt","selectResultCharInt","handleClick","bind","handleChange","handleFormUpdate","handleScroll","e","preventDefault","console","log","target","this","setState","encrypt","updateScroll","decrypt","currentToggle","runUpdates","scrollInd","modNote","selectM","charCodeAt","indexOf","encRes","keyIndex","keyChar","encoded","String","fromCharCode","textAlign","Form","Group","controlId","Label","Control","onChange","placeholder","Text","Container","Row","Col","as","column","sm","Check","label","name","checked","Button","variant","onClick","Table","striped","bordered","hover","_","require","strToBits","str","padStart","bitsToStr","charCodes","chunk","split","map","chunks","join","code","parseInt","XOR","a","b","l","Math","max","out","charAt","substring","round","makePermutationTable","originalSize","permutedSize","options","extraOptions","push","floor","random","randomIndex","splice","sBoxes","getSBoxes","expansionBox","L","R","keys","P","initialCallback","isInitialRound","expandedR0","xorWithKey","afterSBox","output","section","row","at","col","toString","sBoxBlock","permutatedBlock","xorWithLeft","BinaryDisplay","chunkSize","chunked","merge","fontFamily","fontSize","wordBreak","PermutationTable","showIndices","columns","rows","colSpan","r","bit","c","UTFDisplay","ascii","letters","bitCodes","cells","zip","letter","Fragment","DesPage","plaintext","encryptedBits","decryptedCiphertext","first64BitBlock","first64Bits","IP","afterInitialPermutation","L0","R0","afterExpansionBox","afterXorWithKey","permutationBox","afterPermutation","afterXorWithLeft","handleUpdate","doEncryption","Promise","resolve","prop","originalKey","PC1","PC2","NUM_LHS","shifts","newKey","paddedMessage","originalBinary","FP","isSavedInState","isFirstRound","initialPermutation","afterDESRounds","input","halvesCallback","halves","DESRounds","finalPermutation","binaryKey","generateKeys","addPadding","binaryMessage","encryptedBinary","encryptBlock","doDecryption","cipherbits","decryptedBinary","reverse","decryptedMessage","bitsToHex","hex","n","display","justifyContent","alignItems","Card","padding","trigger","triggerWhenOpen","whiteSpace","calc_n","p","q","calc_phi_n","gcd","t","isPrime","val","sqrt","RsaPage","useState","setP","setQ","setN","phi","setPhi","setE","d","setD","setMessage","ascii_encrypted","setASCIIencrypt","rsa_encrypted","setRSAencrypt","rsa_decrypted","setRSAdecrypt","ascii_decrypted","setASCIIdecrypt","useEffect","text","ascii_encrypt","N","Number","BigInt","rsa_encrypt","rsa_decrypt","ascii_decrypt","ListGroup","Item","event","isValid_e","res","count","generate_e","isValid_d","generate_d","md5cycleIterations","md5cycle","x","k","rotate_amounts","K","getDefaults","F","ff","gg","hh","ii","add32","collect","s","abs","sin","md5block","md5blocks","makeHex","hex_chr","md5","hash","tail","makeMD5","makeDisplayBlock","block","makePretty","arr","outer","split_result","zeros","j","final_result","replace","iterum","makeASCII","curHash","Md5Page","blocks","aCur","bCur","cCur","dCur","iterator","iteration","encodedPretty","warning","numIteration","disableButton","initials","next","temp","JSON","parse","stringify","nextIter","disabled","App","updateMe","info","login","basename","process","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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AAK,CAAC,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,GAAG,EAAE,GAAG,EAAE,EAAE,EACpC,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,EACpC,GAAG,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,GAAG,GAAG,EACpC,EAAE,GAAG,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,EAAE,GAAG,EAAE,EAAE,IAChDA,EAAO,GAAK,CAAC,EAAE,GAAG,GAAG,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,EAAE,GACnC,GAAG,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,GAAG,EACpC,GAAG,EAAE,EAAE,EAAE,GAAG,GAAG,EAAE,GAAG,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EACpC,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,EAAE,EAAE,IAChDA,EAAO,GAAK,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,GAAG,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,EAAE,GAAG,EACpC,GAAG,GAAG,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,GAAG,EAAE,EAAE,EAAE,EACpC,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,GACnC,GAAG,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,GACjDA,EAAO,GAAK,CAAC,GAAG,EAAE,GAAG,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,GACnC,GAAG,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,EAAE,GAAG,EAAE,EACpC,EAAE,GAAG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","file":"static/js/main.dfa2777c.chunk.js","sourcesContent":["// eslint-disable-next-line no-unused-vars\r\nfunction bitString(bits, size) {\r\n    let string = '';\r\n    for (let i = 0;i < size; i++) {\r\n        string = getBit(bits, i) + string;\r\n    }\r\n    return string;\r\n}\r\n\r\n/**\r\n * Gets the value of the bit at the specified index\r\n * @param {number} binary - The binary number\r\n * @param {number} index - The index of the bit to get (zero is rightmost bit)\r\n * @returns {number} The value of the specified bit\r\n */\r\nfunction getBit(binary, index) {\r\n    const selectionMask = 1 << index;\r\n    const overlapMask = binary & selectionMask;\r\n    return overlapMask >>> index;\r\n}\r\n\r\n/**\r\n * Set the value of the bit at the specified index to `value`\r\n * @param {number} original - The original number\r\n * @param {number} index - The index of the bit to set (zero is rightmost)\r\n * @param {number} value - The value to set the bit to\r\n * @returns {number} The new binary, with the appropriate bit set\r\n */\r\nfunction setBit(original, index, value) {\r\n    const selectionMask = 1 << index;\r\n\r\n    if (value === 1) {\r\n        return original | selectionMask;\r\n    } else {\r\n        return original & ~selectionMask;\r\n    }\r\n}\r\n\r\n/**\r\n * Perform a circular left shift on a binary number\r\n * @param {number} original - The original number\r\n * @param {number} size - The number of bits you are working with\r\n * @param {number} amount - The number of left shifts\r\n */\r\nfunction circularLeftShift(original, size, amount) {\r\n    if (amount < 0) throw new Error('amount must be non-negative');\r\n    if (amount === 0) return original;\r\n\r\n    const leftMostBit = getBit(original, size - 1);\r\n    let shifted = original << 1;\r\n    shifted = setBit(shifted, size, 0); // Clear the shifted bit\r\n    shifted = setBit(shifted, 0, leftMostBit); // Wrap it around\r\n    return circularLeftShift(shifted, size, amount - 1);\r\n}\r\n\r\n/**\r\n * Apply a permutation to a binary number, and return the result\r\n * @param {number} bits - The original bits\r\n * @param {number[]} table - The permutation table\r\n */\r\nfunction permutate(bits, table) {\r\n    let number = 0;\r\n\r\n    for (let i = 0; i < table.length; i++) {\r\n        const movingValue = getBit(bits, table[i]);\r\n        number = setBit(number, i, movingValue);\r\n    }\r\n\r\n    return number;\r\n}\r\n\r\nfunction makeHalves(bits, length) {\r\n    const leftMask = ~0b0 << (length / 2);\r\n    const rightMask = ~leftMask;\r\n    const leftHalf = (leftMask & bits) >>> (length / 2);\r\n    const rightHalf = rightMask & bits;\r\n    return [leftHalf, rightHalf];\r\n}\r\n\r\nfunction joinPieces(left, right, rightSize) {\r\n    return (left << rightSize) | right;\r\n}\r\n\r\nfunction fromHalves(left, right, eachHalf) {\r\n    return joinPieces(left, right, eachHalf);\r\n}\r\n\r\nmodule.exports = {\r\n    bitString,\r\n    getBit,\r\n    setBit,\r\n    circularLeftShift,\r\n    permutate,\r\n    makeHalves,\r\n    joinPieces,\r\n    fromHalves,\r\n}\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './styling/Nav.css';\r\n//import './Styling/Boot.css';\r\n\r\n/**\r\n * Navigation Bar is generated here, uses Bootstrap and Reacter Router for links\r\n */\r\nfunction Nav() {\r\n  return (\r\n    <nav className='navbar navbar-expand-md'>\r\n      <div className='navbar-brand'>\r\n        <Link to='/'>\r\n          <div className='navImg'>\r\n            <img src='images/CWRUSecurityGrey.png' alt='Logo'></img>\r\n          </div>\r\n        </Link>\r\n      </div>\r\n      <button\r\n        className='navbar-toggler navbar-dark'\r\n        type='button'\r\n        data-toggle='collapse'\r\n        data-target='#main-navigation'\r\n      >\r\n        <span className='navbar-toggler-icon'></span>\r\n      </button>\r\n      <div className='collapse navbar-collapse' id='main-navigation'>\r\n        <ul className='navbar-nav'>\r\n          <li className='nav-item'>\r\n            <div className='nav-link'>\r\n              <Link to='/'>Home</Link>\r\n            </div>\r\n          </li>\r\n          <li className='nav-item'>\r\n            <div className='nav-link'>\r\n              <Link to='/about'>About</Link>\r\n            </div>\r\n          </li>\r\n          <li className='nav-item'>\r\n            <div className='nav-link'>\r\n              <Link to='/Vigenere'>Vigen&#232;re Cipher</Link>\r\n            </div>\r\n          </li>\r\n          <li className='nav-item'>\r\n            <div className='nav-link'>\r\n              <Link to='/DES'>DES</Link>\r\n            </div>\r\n          </li>\r\n          <li className='nav-item'>\r\n            <div className='nav-link'>\r\n              <Link to='/RSA'>RSA</Link>\r\n            </div>\r\n          </li>\r\n          <li className='nav-item'>\r\n            <div className='nav-link'>\r\n              <Link to='/MD5'>MD5</Link>\r\n            </div>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Nav from \"../Nav\";\r\nimport '../styling/page.css';\r\n\r\n// Generic page wrapper\r\nconst Page = ({ title, children, contentStyle, ...rest }) => (\r\n    <div {...rest}>\r\n        <Nav />\r\n        <div className=\"container\" style={{ marginTop: 60, marginBottom: 120, ...contentStyle }}>\r\n            <h1>{title}</h1>\r\n            {children}\r\n        </div>\r\n    </div>\r\n);\r\n\r\nPage.propTypes = {\r\n    title: PropTypes.string,\r\n    children: PropTypes.node,\r\n    contentStyle: PropTypes.object,\r\n};\r\n\r\nexport default Page;\r\n","import React, { Component } from 'react'\r\nimport Page from \"../components/shared/page\";\r\n\r\nclass Home extends Component {\r\n    render() {\r\n        return (\r\n            <Page title=\"Home\">\r\n                CSDS 344: Computer Security \r\n                <br></br>\r\n                Final Project\r\n                <br></br>\r\n                Alessandra Sivilotti, Alex Neyman, Lucas Pham, \r\n                Lucas Popp, Jason Richards, Jacob Engelbrecht\r\n                <br></br>\r\n                <img src='images/CWRUSecurity.png' alt='Logo' style={{'width': '50%'}}></img>\r\n            </Page>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport Page from \"../components/shared/page\";\r\n\r\n/**\r\n * About Page Wrapper, relies on React Router for routing to here\r\n */\r\nclass About extends React.Component {\r\n   render() {\r\n      return (\r\n          <Page title=\"About\">\r\n              Might as well have an about page...\r\n          </Page>\r\n      )\r\n   }\r\n}\r\nexport default About;\r\n","import React from 'react';\r\nimport Page from \"../components/shared/page\";\r\nimport {Form, Row, Col, Container, Button, Table} from 'react-bootstrap';\r\n\r\nvar chars = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\",\r\n      \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"A\", \"B\", \"C\", \"D\",\r\n      \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\",\r\n      \"!\", \"@\", \"#\", \"$\", \"%\", \"^\", \"&\", \"*\", \"(\", \")\", \"-\", \"=\", \"[\", \"]\", \";\", \"'\", \"\\\"\", \"\\\\\", \"|\", \":\", \"_\", \"+\",\r\n      \",\", \".\", \"<\", \">\", \"{\", \"}\", \"/\", \"?\", \"`\", \"~\", \" \"]\r\n\r\nclass VigenerePage extends React.Component {\r\n\r\n   constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n         isToggleOn: true,\r\n         message: \"\",\r\n         key: \"\",\r\n         result: \"\",\r\n         cipher: \"\",\r\n         cipherKey: \"\",\r\n         clear: \"\",\r\n         useAscii: false,\r\n         scrollPos: 0,\r\n         selectChar: \"\",\r\n         selectKeyChar: \"\", \r\n         selectResultChar: \"\", \r\n         selectCharInt: 0,\r\n         selectKeyCharInt: 0, \r\n         selectResultCharInt: 0, \r\n         \r\n      };\r\n\r\n      // This binding is necessary to make `this` work in the callback\r\n      this.handleClick = this.handleClick.bind(this);\r\n      this.handleChange = this.handleChange.bind(this);\r\n      this.handleFormUpdate = this.handleFormUpdate.bind(this);\r\n      this.handleScroll = this.handleScroll.bind(this);\r\n    }\r\n\r\n   handleClick(e) {\r\n      e.preventDefault();\r\n      console.log(e.target.id)\r\n      console.log(this.state.message);\r\n   }\r\n\r\n   handleFormUpdate(e) {\r\n      if(e.target.id === \"EncryptUpdate\") {\r\n         this.setState({message: e.target.value});\r\n         this.setState({result: this.encrypt(e.target.value, this.state.key)}, this.updateScroll)\r\n      }\r\n      else if (e.target.id === \"keyUpdate\") {\r\n         this.setState({key: e.target.value});\r\n         this.setState({result: this.encrypt(this.state.message, e.target.value)}, this.updateScroll)\r\n      }\r\n      else if(e.target.id === \"cipherUpdate\") {\r\n         this.setState({cipher: e.target.value});\r\n         this.setState({clear: this.decrypt(e.target.value, this.state.cipherKey)})\r\n      }\r\n      else if (e.target.id === \"cipheyKeyUpdate\") {\r\n         this.setState({cipherKey: e.target.value});\r\n         this.setState({clear: this.decrypt(this.state.cipher, e.target.value)})\r\n      }\r\n   }\r\n\r\n   handleChange(e) {\r\n      let currentToggle = this.state.useAscii\r\n      this.setState({useAscii: !currentToggle}, this.runUpdates)\r\n   }\r\n\r\n   runUpdates() {\r\n      this.setState({result: this.encrypt(this.state.message, this.state.key)})\r\n      this.setState({clear: this.decrypt(this.state.cipher, this.state.cipherKey)}, this.updateScroll)\r\n   }\r\n\r\n   updateScroll() {\r\n      let scrollInd = this.state.scrollPos\r\n      if(this.state.message.length === 0 || scrollInd < 0) {\r\n         this.setState({\r\n            selectChar: \"\",\r\n            selectKeyChar: \"\", \r\n            selectResultChar: \"\", \r\n            selectCharInt: 0,\r\n            selectKeyCharInt: 0, \r\n            selectResultCharInt: 0, \r\n            scrollPos: 0,\r\n            modNote: \"\"\r\n         })\r\n         return 1\r\n      }\r\n      if(scrollInd >= this.state.message.length) {\r\n         this.setState({scrollPos: this.state.message.length - 1}, this.updateScroll)\r\n      }\r\n      else {\r\n         let selectM = this.state.message[scrollInd]\r\n         this.setState({selectChar: selectM})\r\n         if (!this.state.useAscii) {\r\n            this.setState({selectCharInt: chars.indexOf(selectM)})\r\n         }\r\n         else {\r\n            this.setState({selectCharInt: selectM.charCodeAt(0)})\r\n         }\r\n         let encRes = \"\"\r\n         if (this.state.key.length === 0) {\r\n            this.setState({\r\n               selectKeyChar: \"\",\r\n               selectKeyCharInt: 0, \r\n            })\r\n            encRes = this.encrypt(selectM, \"\")\r\n            this.setState({selectResultChar: encRes})\r\n         }\r\n         else{\r\n            this.setState({selectKeyChar: this.state.key[scrollInd % this.state.key.length]})\r\n            encRes = this.encrypt(selectM, this.state.key[scrollInd % this.state.key.length])\r\n            this.setState({selectResultChar: encRes})\r\n            if (!this.state.useAscii) {\r\n               this.setState({selectKeyCharInt: chars.indexOf(this.state.key[scrollInd % this.state.key.length])})\r\n               if (chars.indexOf(this.state.key[scrollInd % this.state.key.length]) + chars.indexOf(selectM) > chars.length) {\r\n                  this.setState({modNote: \"*When the sum falls outside of the character list, it loops to the bottom!\"})\r\n               }\r\n               else {\r\n                  this.setState({modNote: \"\"})\r\n               }\r\n            }\r\n            else {\r\n               this.setState({selectKeyCharInt: this.state.key[scrollInd % this.state.key.length].charCodeAt(0)})\r\n               if (this.state.key[scrollInd % this.state.key.length].charCodeAt(0) + selectM.charCodeAt(0) > 127) {\r\n                  this.setState({modNote: \"*When the sum falls outside of the character list, it loops to the bottom!\"})\r\n               }\r\n               else {\r\n                  this.setState({modNote: \"\"})\r\n               }\r\n            }\r\n         }\r\n         if (!this.state.useAscii) {\r\n            this.setState({selectResultCharInt: chars.indexOf(encRes)})\r\n         }\r\n         else {\r\n            this.setState({selectResultCharInt: encRes.charCodeAt(0)})\r\n         }\r\n      }\r\n   }\r\n\r\n   handleScroll(e) {\r\n\r\n      let scrollInd = this.state.scrollPos\r\n      if(e.target.id === \"LeftSelect\") {\r\n         if (scrollInd !== 0) {\r\n            this.setState({scrollPos: scrollInd - 1}, this.updateScroll)\r\n         }\r\n      }\r\n      else if(e.target.id === \"RightSelect\") {\r\n         if (scrollInd <= this.state.message.length) {\r\n            this.setState({scrollPos: scrollInd + 1}, this.updateScroll)\r\n         }\r\n      }\r\n   }\r\n\r\n   encrypt(message, key) {\r\n\r\n      let result = \"\"\r\n\r\n      for(let i = 0; i < message.length; i++){\r\n         let index\r\n         if(this.state.useAscii) {\r\n            index = message[i].charCodeAt(0);\r\n         }\r\n         else {\r\n            index = chars.indexOf(message[i])\r\n         }\r\n         \r\n         if (index === -1)\r\n            return(\"Unrecognized Character in Message\")\r\n         let keyIndex = 0\r\n         if (key.length > 0) {\r\n            let keyChar = key[i % key.length]\r\n            if(this.state.useAscii) {\r\n               keyIndex = keyChar.charCodeAt(0);\r\n            }\r\n            else {\r\n               keyIndex = chars.indexOf(keyChar)\r\n            }\r\n            \r\n         }\r\n         if (keyIndex === -1)\r\n            return(\"Unrecognized Character in Key\")\r\n         if (this.state.useAscii) {\r\n            let encoded = (keyIndex + index) % 127\r\n            result += String.fromCharCode(encoded)\r\n         }\r\n         else {\r\n            let encoded = (keyIndex + index) % chars.length\r\n            result += chars[encoded]\r\n         }\r\n      }\r\n      return result\r\n   }\r\n\r\n   decrypt(cipher, key) {\r\n      let chars = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\",\r\n      \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"A\", \"B\", \"C\", \"D\",\r\n      \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\",\r\n      \"!\", \"@\", \"#\", \"$\", \"%\", \"^\", \"&\", \"*\", \"(\", \")\", \"-\", \"=\", \"[\", \"]\", \";\", \"'\", \"\\\"\", \"\\\\\", \"|\", \":\", \"_\", \"+\",\r\n      \",\", \".\", \"<\", \">\", \"{\", \"}\", \"/\", \"?\", \"`\", \"~\", \" \"]\r\n\r\n      let result = \"\"\r\n\r\n      for(let i = 0; i < cipher.length; i++){\r\n         let index\r\n         if(this.state.useAscii) {\r\n            index = cipher[i].charCodeAt(0);\r\n         }\r\n         else {\r\n            index = chars.indexOf(cipher[i])\r\n         }\r\n         if (index === -1)\r\n            return(\"Unrecognized Character in the Cipher\")\r\n         let keyIndex = 0\r\n         if (key.length > 0) {\r\n            let keyChar = key[i % key.length]\r\n            if(this.state.useAscii) {\r\n               keyIndex = keyChar.charCodeAt(0);\r\n            }\r\n            else {\r\n               keyIndex = chars.indexOf(keyChar)\r\n            }\r\n         }\r\n         if (keyIndex === -1)\r\n            return(\"Unrecognized Character in Key\")\r\n         if(this.state.useAscii){\r\n            let encoded = (index - keyIndex + 127) % 127\r\n            result += String.fromCharCode(encoded)\r\n         }\r\n         else {\r\n            let encoded = (index - keyIndex + chars.length) % chars.length\r\n            //console.log(encoded)\r\n            result += chars[encoded]\r\n         }\r\n      }\r\n      return result\r\n   }\r\n\r\n   ord(string) {\r\n      return string.charCodeAt(0);\r\n   }\r\n\r\n\r\n   render() {\r\n      return (\r\n          <Page title=\"Vigen&#232;re Cipher\">\r\n             <p style={{textAlign: 'left'}}>The Vigen&#232;re Cipher is a modified version of the Caesar Cipher, where instead offset for the message being some fixed value, it is instead linked to a key \r\n                which contains many varying offsets. This key could be one value, making this a Caesar Cipher, or instead it could be the length of the message, a form of security \r\n                that is still sound today and used by Intelligence Agencies where agreed keys are known. Typically the key is somewhere between these two extremes, and looped for the\r\n                length of the message. The longer the key with respect to the message, the stronger the security of the cypher. When the key is too short, statistical attacks are \r\n                still valid attacks on the message.\r\n             </p>\r\n             <br></br>\r\n             <h3>Encryption!</h3>\r\n             <p style={{textAlign: 'left'}}>Enter a message and key to try it yourself!</p>\r\n             <Form>\r\n                <Form.Group controlId=\"EncryptUpdate\">\r\n                   <Form.Label>Message</Form.Label>\r\n                   <Form.Control type=\"text\" onChange={this.handleFormUpdate} placeholder=\"Message to Encrypy\" />\r\n                   <Form.Text className=\"text-muted\">\r\n                      This is the plain text information you want to share.\r\n                   </Form.Text>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"keyUpdate\">\r\n                   <Form.Label>Key</Form.Label>\r\n                   <Form.Control type=\"text\" onChange={this.handleFormUpdate} placeholder=\"Any Length Key\" />\r\n                   <Form.Text className=\"text-muted\">\r\n                      This is the secret key both you and the recipient know.\r\n                   </Form.Text>\r\n                </Form.Group>\r\n             </Form>\r\n             <br></br>\r\n            <Container>\r\n               <Row>\r\n                  <Col>Encoded Message:</Col>\r\n                  <Col>\r\n                     <p>{this.state.result}</p>\r\n                  </Col>\r\n               </Row>\r\n            </Container>\r\n            <br></br>\r\n            <p style={{textAlign: 'left'}}>This encoded message could be transmitted to anyone who agrees on the numerical values of characters, and so long as they have \r\n            the key, they would be able to decrypt and read the original message. Typically, the difficult part of the internet security is agreeing on this key value. </p>\r\n             \r\n             <br></br>\r\n             <fieldset>\r\n               <Form.Group as={Row}>\r\n                  <Form.Label as=\"legend\" column sm={2}>\r\n                  Encoding Options\r\n                  </Form.Label>\r\n                  <Col sm={10}>\r\n                  <Form.Check\r\n                     type=\"radio\"\r\n                     label=\"Visual Character Set*\"\r\n                     name=\"formHorizontalRadios\"\r\n                     id=\"formHorizontalRadios1\"\r\n                     checked={!this.state.useAscii}\r\n                     onChange={this.handleChange}\r\n                  />\r\n                  <Form.Check\r\n                     type=\"radio\"\r\n                     label=\"ASCII\"\r\n                     name=\"formHorizontalRadios\"\r\n                     id=\"formHorizontalRadios2\"\r\n                     checked={this.state.useAscii}\r\n                     onChange={this.handleChange}\r\n                  />\r\n                  </Col>\r\n               </Form.Group>\r\n            </fieldset>\r\n            <p><small>This is just agreeing on a standard for character number relations</small></p>\r\n             <br></br>\r\n             <h3>Understanding the Encypytion Process!</h3>\r\n             <Container>\r\n                <Row>\r\n                   <Col sm={1}><br></br><br></br><Button id='LeftSelect' variant=\"secondary\" onClick={this.handleScroll}>Left</Button></Col>\r\n                  <Col>\r\n                     <Table striped bordered hover>\r\n                        <thead>\r\n                           <tr>\r\n                              <th>#</th>\r\n                              <th>String Form</th>\r\n                              <th>Integer Form</th>\r\n                           </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                           <tr>\r\n                              <td>Message Element</td>\r\n                              <td>{this.state.selectChar}</td>\r\n                              <td>{this.state.selectCharInt}</td>\r\n                           </tr>\r\n                           <tr>\r\n                              <td>Key Element</td>\r\n                              <td>{this.state.selectKeyChar}</td>\r\n                              <td>{this.state.selectKeyCharInt}</td>\r\n                           </tr>\r\n                           <tr>\r\n                              <td>Result</td>\r\n                              <td>{this.state.selectResultChar}</td>\r\n                              <td>{this.state.selectResultCharInt}</td>\r\n                           </tr>\r\n                        </tbody>\r\n                     </Table>\r\n                  </Col>\r\n                   <Col sm={1}><br></br><br></br><Button id='RightSelect' variant=\"secondary\" onClick={this.handleScroll}>Right</Button></Col>\r\n                </Row>\r\n             </Container>\r\n             <p><small>{this.state.modNote}</small></p>\r\n             <p style={{textAlign: 'left'}}>This table looks at the message letter by letter, communicating the string form of a character as you would see it, as well as the \r\n             number representation that goes along with it. This allows us to see that the result is just the character with the sum of the message value and the key value.</p>\r\n             <br></br>\r\n             <h3>Decryption</h3>\r\n             <p style={{textAlign: 'left'}}>\r\n                The decryption process is very similar, instead of adding the values of the message and the key, instead it subtracts the key value from the cypher value of that \r\n                character. Here you can see that you need to agree on the key value for the cypher text to have its meaning. \r\n             </p>\r\n             <Form>\r\n                <Form.Group controlId=\"cipherUpdate\">\r\n                   <Form.Label>Cypher</Form.Label>\r\n                   <Form.Control type=\"text\" onChange={this.handleFormUpdate} placeholder=\"The Cypher Text\" />\r\n                   <Form.Text className=\"text-muted\">\r\n                      This is the cypher text you received.\r\n                   </Form.Text>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"cipheyKeyUpdate\">\r\n                   <Form.Label>Key</Form.Label>\r\n                   <Form.Control type=\"text\" onChange={this.handleFormUpdate} placeholder=\"Any Length Key\" />\r\n                   <Form.Text className=\"text-muted\">\r\n                      This is the secret key that was used to encrypt thie message.\r\n                   </Form.Text>\r\n                </Form.Group>\r\n             </Form>\r\n             <Container>\r\n               <Row>\r\n                  <Col>Decrypted Message:</Col>\r\n                  <Col>\r\n                     <p>{this.state.clear}</p>\r\n                  </Col>\r\n               </Row>\r\n            </Container>\r\n            <br></br>\r\n            <p style={{textAlign: 'left'}}>And just like that, the encrypted message is achievable again from a seemingly garbled message. You should always remember though\r\n            that this method has its weaknesses, especially when the messages grow in length compared to the key.</p>\r\n             <br></br>\r\n             <br></br>\r\n             <p><small>*Visual Character Set is a selected subset of characters that are all able to be rendered easily in browsers, opposed to ASCII. Not an industry standard.</small></p>\r\n          </Page>\r\n      )\r\n   }\r\n}\r\nexport default VigenerePage;\r\n","const _ = require('lodash');\r\nconst { bitString } = require('./bit-handling');\r\n\r\n/**\r\n * Converts a string of text to a string of bits\r\n * @param {string} str Any text\r\n * @return {string} The charCodes of the characters in base 2\r\n */\r\nfunction strToBits(str) {\r\n    let bits = '';\r\n    for (let i = 0;i < str.length;i++) {\r\n        bits += bitString(str.charCodeAt(i), 16).padStart(16, '0');\r\n    }\r\n    return bits;\r\n}\r\n\r\n/**\r\n * Converts a string of bits back to text\r\n * @param {string} bits Char codes\r\n * @return {string} The text string corresponding to those character codes\r\n */\r\nfunction bitsToStr(bits) {\r\n    const charCodes = _.chunk(bits.split(''), 16).map(chunks => chunks.join(''));\r\n    return String.fromCharCode(...charCodes.map(code => parseInt(code, 2)));\r\n}\r\n\r\n/**\r\n * Gets the value of the bit at the specified index\r\n * @param {string} binary The binary string representation\r\n * @param {number} index The index of the bit to get (zero is rightmost bit)\r\n * @returns {number} The value of the specified bit\r\n */\r\nfunction getBit(binary, index) {\r\n    const i = binary.length - index - 1;\r\n    return parseInt(binary.charAt(i));\r\n}\r\n\r\n/**\r\n * Set the value of the bit at the specified index to `value`\r\n * @param {string} original The original bit string\r\n * @param {number} index The index of the bit to set (zero is rightmost)\r\n * @param {number} value The value to set the bit to\r\n * @returns {string} The new bitstring, with the appropriate bit set\r\n */\r\nfunction setBit(original, index, value) {\r\n    const i = original.length - index - 1;\r\n    return `${original.substring(0, i)}${value}${original.substring(i + 1)}`;\r\n}\r\n\r\nfunction AND(a, b) {\r\n    const l = Math.max(a.length, b.length);\r\n    a = a.padStart(l, '0');\r\n    b = b.padStart(l, '0');\r\n    let out = '';\r\n\r\n    for (let i = 0;i < l;i++) {\r\n        if (a.charAt(i) === '0' || b.charAt(i) === '0') {\r\n            out += '0';\r\n        } else {\r\n            out += '1';\r\n        }\r\n    }\r\n\r\n    return out;\r\n}\r\n\r\nfunction OR(a, b) {\r\n    const l = Math.max(a.length, b.length);\r\n    a = a.padStart(l, '0');\r\n    b = b.padStart(l, '0');\r\n    let out = '';\r\n\r\n    for (let i = 0;i < l;i++) {\r\n        if (a.charAt(i) === '1' || b.charAt(i) === '1') {\r\n            out += '1';\r\n        } else {\r\n            out += '0';\r\n        }\r\n    }\r\n\r\n    return out;\r\n}\r\n\r\nfunction XOR(a, b) {\r\n    const l = Math.max(a.length, b.length);\r\n    a = a.padStart(l, '0');\r\n    b = b.padStart(l, '0');\r\n    let out = '';\r\n\r\n    for (let i = 0;i < l;i++) {\r\n        if (a.charAt(i) !== b.charAt(i)) {\r\n            out += '1';\r\n        } else {\r\n            out += '0';\r\n        }\r\n    }\r\n\r\n    return out;\r\n}\r\n\r\nfunction leftShift(original, amount) {\r\n    return original + '0'.repeat(amount);\r\n}\r\n\r\n/**\r\n * Perform a circular left shift on a binary number\r\n * @param {string} original The original bitstring\r\n * @param {number} amount The number of left shifts\r\n * @return {string} The shifted bitstring\r\n */\r\nfunction circularLeftShift(original, amount) {\r\n    if (amount < 0) throw new Error('amount must be non-negative');\r\n    amount = amount % original.length;\r\n    if (amount === 0) return original;\r\n\r\n    return original.substring(amount) + original.substring(0, amount);\r\n}\r\n\r\n/**\r\n * Apply a permutation to a binary string, and return the result\r\n * @param {string} bits The original bits\r\n * @param {number[]} table The permutation table\r\n * @return {string} The permuted result\r\n */\r\nfunction permutate(bits, table) {\r\n    return table.map(i =>\r\n        getBit(bits, bits.length - i - 1))\r\n        .join('');\r\n}\r\n\r\nfunction makeHalves(bits) {\r\n    const length = Math.round(bits.length / 2);\r\n    return [bits.substring(0, length), bits.substring(length)];\r\n}\r\n\r\nfunction swapHalves(bits) {\r\n    const [R, L] = makeHalves(bits);\r\n    return fromHalves(L, R);\r\n}\r\n\r\nfunction joinPieces(left, right) {\r\n    return left + right;\r\n}\r\n\r\nfunction fromHalves(left, right) {\r\n    return joinPieces(left, right);\r\n}\r\n\r\nfunction makePermutationTable(originalSize, permutedSize) {\r\n    const options = [];\r\n    const extraOptions = [];\r\n    for (let i = 0;i < originalSize;i++) options.push(i);\r\n\r\n    if (permutedSize > originalSize) {\r\n        for (let i = 0;i < permutedSize - originalSize;i++) {\r\n            extraOptions.push(options[Math.floor(Math.random() * options.length)]);\r\n        }\r\n\r\n        options.push(...extraOptions);\r\n    }\r\n\r\n    const table = [];\r\n    for (let i = 0;i < permutedSize;i++) {\r\n        const randomIndex = Math.floor(Math.random() * options.length);\r\n        table.push(options.splice(randomIndex, 1)[0]);\r\n    }\r\n\r\n    return table;\r\n}\r\n\r\n// Not sure this works\r\nfunction invertPermutationTable(table) {\r\n    const ignore = new Set();\r\n    const inverted = [];\r\n\r\n    for (let i = 0;i < table.length;i++) {\r\n        if (ignore.has(table[i])) continue;\r\n        ignore.add(table[i]);\r\n        inverted[table[i]] = i;\r\n    }\r\n\r\n    return inverted;\r\n}\r\n\r\nexport {\r\n    strToBits,\r\n    bitsToStr,\r\n    getBit,\r\n    setBit,\r\n    AND,\r\n    OR,\r\n    XOR,\r\n    leftShift,\r\n    circularLeftShift,\r\n    permutate,\r\n    makeHalves,\r\n    swapHalves,\r\n    joinPieces,\r\n    fromHalves,\r\n    makePermutationTable,\r\n    invertPermutationTable,\r\n};\r\n","import {XOR, permutate, makeHalves} from '../bit-handling-2';\r\nconst _ = require('lodash');\r\n//const bitHandling = require('../bit-handling-2');\r\n\r\n\r\nconst sBoxes = getSBoxes();\r\nconst expansionBox = [31,0,1,2,3,4,3,4,5,6,7,8,7,8,9,10,11,12,11,12,13,14,15,16,15,16,17,18,19,20,19,20,21,22,23,24,23,24,25,26,27,28,27,28,29,30,31,0];\r\n\r\nfunction getSBoxes() {\r\n    // Obtained from: https://www.oreilly.com/library/view/computer-security-and/9780471947837/sec9.3.html\r\n    // and https://www.nku.edu/~christensen/DESschneier.pdf\r\n    const sBoxes = [];\r\n    sBoxes[0] = [14,4,13,1,2,15,11,8,3,10,6,12,5,9,0,7,\r\n                 0,15,7,4,14,2,13,1,10,6,12,11,9,5,3,8,\r\n                 4,1,14,8,13,6,2,11,15,12,9,7,3,10,5,0,\r\n                 15,12,8,2,4,9,1,7,5,11,3,14,10,0,6,14];\r\n    sBoxes[1] = [15,1,8,14,6,11,3,4,9,7,2,13,12,0,5,10,\r\n                 3,13,4,7,15,2,8,14,12,0,1,10,6,9,11,5,\r\n                 0,14,7,11,10,4,13,1,5,8,12,6,9,3,2,15,\r\n                 13,8,10,1,3,15,4,2,11,6,7,12,0,5,14,9];\r\n    sBoxes[2] = [10,0,9,14,6,3,15,5,1,13,12,7,11,4,2,8,\r\n                 13,7,0,9,3,4,6,10,2,8,5,14,12,11,15,1,\r\n                 13,6,4,9,8,15,3,0,11,1,2,13,5,10,14,7,\r\n                 1,10,13,0,6,9,8,7,4,15,14,3,11,5,2,12];\r\n    sBoxes[3] = [7,13,14,3,0,6,9,10,1,2,8,5,11,12,4,15,\r\n                 13,8,11,5,6,15,0,3,4,7,2,12,1,10,14,9,\r\n                 10,6,9,0,12,11,7,13,15,1,3,14,5,2,8,4,\r\n                 3,15,0,6,10,1,13,8,9,4,5,11,12,7,2,14];\r\n    sBoxes[4] = [2,12,4,1,7,10,11,6,8,5,3,15,13,0,14,9,\r\n                 14,11,2,12,4,7,13,1,5,0,15,10,3,9,8,6,\r\n                 4,2,1,11,10,13,7,8,15,9,12,5,6,3,0,14,\r\n                 11,8,12,7,1,14,2,13,6,15,0,9,10,4,5,3];\r\n    sBoxes[5] = [12,1,10,15,9,2,6,8,0,13,3,4,14,7,5,11,\r\n                 10,15,4,2,7,12,9,5,6,1,13,14,0,11,3,8,\r\n                 9,14,15,5,2,8,12,3,7,0,4,10,1,13,11,6,\r\n                 4,3,2,12,9,5,15,10,11,14,1,7,6,0,8,13];\r\n    sBoxes[6] = [4,11,2,14,15,0,8,13,3,12,9,7,5,10,6,1,\r\n                 13,0,11,7,4,9,1,10,14,3,5,12,2,15,8,6,\r\n                 1,4,11,13,12,3,7,14,10,15,6,8,0,5,9,2,\r\n                 6,11,13,8,1,4,10,7,9,5,0,15,14,2,3,12];\r\n    sBoxes[7] = [13,2,8,4,6,15,11,1,10,9,3,14,5,0,12,7,\r\n                 1,15,13,8,10,3,7,4,12,5,6,11,0,14,9,2,\r\n                 7,11,4,1,9,12,14,2,0,6,10,13,15,3,5,8,\r\n                 2,1,14,7,4,10,8,13,15,12,9,0,3,5,6,11];\r\n    return sBoxes;\r\n }\r\n\r\nfunction sBoxBlock({bits, sBoxes}){\r\n    let output = \"\";\r\n    for (let i = 0; i < 8; i++){\r\n       const section = bits.substring(6*i, 6*i+6);\r\n       const row = parseInt(_.at(section,0) + _.at(section,5), 2);\r\n       const col = parseInt(section.substring(1,5), 2);\r\n       const newEntry = sBoxes[i][16*row + col];\r\n       output += newEntry.toString(2).padStart(4, \"0\");\r\n    }\r\n    return output;\r\n }\r\n\r\n function round({L, R, i, keys, P, initialCallback, isInitialRound}){\r\n     // Expand right size from 32 to 48 bits\r\n     const expandedR0 = permutate(R, expansionBox);\r\n\r\n     // XOR with sub-key i\r\n     const xorWithKey = XOR(expandedR0, keys[i]);\r\n\r\n     // S-boxes to shrink from 48 to 32 bits\r\n     const afterSBox = sBoxBlock({\r\n         bits: xorWithKey,\r\n         sBoxes,\r\n     });\r\n\r\n     // Permutation\r\n     const permutatedBlock = permutate(afterSBox, P);\r\n\r\n     // XOR with left side\r\n     const xorWithLeft = XOR(permutatedBlock, L);\r\n\r\n     if (isInitialRound){\r\n         console.log(\"first round\");\r\n         initialCallback(L, R, expandedR0, xorWithKey, afterSBox, permutatedBlock, xorWithLeft);\r\n     }\r\n\r\n     // Assign to new right side\r\n     return xorWithLeft;\r\n }\r\n\r\nfunction DESRounds({ input, keys, P, isFirstRound, initialCallback, halvesCallback }){\r\n    const halves = [];\r\n\r\n    // Does the 16 rounds of DES for a 64 bit block\r\n    let [L, R] = makeHalves(input);\r\n    let isInitialRound = isFirstRound;\r\n\r\n    // Add halves in each round for visualization purposes\r\n    halves.push([L, R]);\r\n\r\n    // Performs 16 rounds of DES\r\n    for (let i = 0; i < 16; i++){\r\n       [L, R] = [R, round({L, R, i, keys, P, initialCallback, isInitialRound})];\r\n       halves.push([L, R]);\r\n       isInitialRound = false;\r\n    }\r\n\r\n    halvesCallback && halvesCallback(halves);\r\n\r\n    return R + L;\r\n }\r\n\r\nexport {DESRounds, sBoxBlock, round, expansionBox, sBoxes};\r\n","import _ from 'lodash';\r\nimport React from 'react';\r\nimport Latex from 'react-latex';\r\n\r\nclass BinaryDisplay extends React.Component {\r\n    render() {\r\n        const binary = this.props.bits || '';\r\n        const chunkSize = this.props.chunkSize || binary.length;\r\n        const chunked = _.chunk(binary.split(''), chunkSize).map(bits => bits.join('')).join(' ');\r\n        const style = _.merge({}, { fontFamily: 'monospace', fontSize: '1.2rem' }, this.props.style);\r\n        return (\r\n            <div style={{ wordBreak: 'break-word' }}>\r\n                {this.props.label &&\r\n                    <Latex>{this.props.label}</Latex>}\r\n                    {this.props.label && ': '}\r\n                    <span style={style}>{chunked}</span>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BinaryDisplay;\r\n","import _ from 'lodash';\r\nimport React from 'react';\r\nimport './permutation-table.css';\r\n\r\nconst PermutationTable = ({ title = 'Permutation Table', showIndices = true, table, columns }) => {\r\n    const rows = _.chunk(table, columns);\r\n\r\n    return (\r\n        <table className=\"permutation-table\">\r\n            <tbody>\r\n                <tr key=\"head\">\r\n                    <th colSpan={columns}>{title}</th>\r\n                </tr>\r\n                {rows.map((row, r) => (\r\n                    <tr key={r}>\r\n                        {row.map((bit, c) => (\r\n                            <td key={c}>\r\n                                {showIndices && <span className=\"index\">{(r * columns) + c + 1}</span>}\r\n                                <span className=\"permuted\">{bit}</span>\r\n                            </td>\r\n                        ))}\r\n                    </tr>\r\n                ))}\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\nexport default PermutationTable;\r\n","import _ from 'lodash';\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './utf-display.css';\r\nimport {strToBits} from \"../../bit-handling-2\";\r\n\r\n\r\nconst UTFDisplay = ({ ascii, columns }) => {\r\n    if (!columns) columns = ascii.length;\r\n    const letters = ascii.split('');\r\n    const bitCodes = _.chunk(strToBits(ascii).split(''), 16).map(bits => bits.join(''));\r\n    const cells = _.zip(letters, bitCodes).map(([letter, bits]) => ({ letter, bits }));\r\n    const rows = _.chunk(cells, columns);\r\n\r\n    return (\r\n        <div className=\"utf-display\">\r\n            <table>\r\n                <tbody>\r\n                    {rows.map((cells, r) => (\r\n                        <React.Fragment key={r}>\r\n                            <tr key={`${r}a`}>\r\n                                {cells.map(({ letter }, c) => (\r\n                                    <td key={c}>\r\n                                        <div className=\"index\">{(r * columns) + c + 1}</div>\r\n                                        <h1>{letter}</h1>\r\n                                    </td>\r\n                                ))}\r\n                            </tr>\r\n                            <tr key={`${r}b`}>\r\n                                {cells.map(({ bits }, c) => (\r\n                                    <td className=\"bits\" key={c}>\r\n                                        <div style={{ fontFamily: 'monospace' }}>\r\n                                            {bits}\r\n                                        </div>\r\n                                    </td>\r\n                                ))}\r\n                            </tr>\r\n                        </React.Fragment>\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nUTFDisplay.propTypes = {\r\n    ascii: PropTypes.string,\r\n    columns: PropTypes.number,\r\n};\r\n\r\nexport default UTFDisplay;\r\n","import _ from 'lodash';\r\nimport React from 'react';\r\nimport {Card, Form} from 'react-bootstrap';\r\nimport Button from 'react-bootstrap/Button'\r\nimport Collapsible from 'react-collapsible';\r\nimport {DESRounds, expansionBox, sBoxes} from '../components/DES';\r\nimport BinaryDisplay from \"../components/shared/binary-display\";\r\nimport PermutationTable from \"../components/shared/permutation-table\";\r\nimport Page from \"../components/shared/page\";\r\nimport UTFDisplay from \"../components/shared/utf-display\";\r\nimport Latex from 'react-latex';\r\nimport Table from \"react-bootstrap/Table\";\r\n//import bitHandling from '../bit-handling-2';\r\nimport {strToBits, bitsToStr, makeHalves, makePermutationTable, permutate, circularLeftShift, fromHalves} from '../bit-handling-2';\r\n\r\n\r\n\r\n/**\r\n * About Page Wrapper, relies on React Router for routing to here\r\n */\r\nclass DesPage extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isToggleOn: true,\r\n            plaintext: \"Hello world!\",\r\n            key: \"akey\",\r\n            encryptedBits: \"\",\r\n            decryptedCiphertext: \"\",\r\n            keys: [],\r\n            first64BitBlock: \"\",\r\n            first64Bits: \"\",\r\n            IP: [],\r\n            afterInitialPermutation: \"\",\r\n            L0: \"\",\r\n            R0: \"\",\r\n            afterExpansionBox: \"\",\r\n            afterXorWithKey: \"\",\r\n            afterSBox: \"\",\r\n            permutationBox: [],\r\n            afterPermutation: \"\",\r\n            afterXorWithLeft: \"\",\r\n        }\r\n\r\n        this.handleUpdate = this.handleUpdate.bind(this);\r\n        this.doEncryption = this.doEncryption.bind(this);\r\n    }\r\n\r\n    async setStateSync(state) {\r\n        return new Promise(resolve => this.setState(state, resolve));\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.doEncryption();\r\n    }\r\n\r\n    handleUpdate(prop, e) {\r\n        this.setState({[prop]: e.target.value});\r\n    }\r\n\r\n    generateKeys({originalKey, PC1, PC2}) {\r\n        const N_ROUNDS = 16;\r\n        const NUM_LHS = [1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1];\r\n\r\n        const keys = [];\r\n        const initialPermutation = permutate(originalKey, PC1);\r\n        let [left, right] = makeHalves(initialPermutation);\r\n\r\n        for (let round = 0; round < N_ROUNDS; round++) {\r\n            const shifts = NUM_LHS[round];\r\n            left = circularLeftShift(left, shifts);\r\n            right = circularLeftShift(right, shifts);\r\n\r\n            const newKey = permutate(fromHalves(left, right), PC2);\r\n            keys.push(newKey);\r\n        }\r\n\r\n        return keys;\r\n    }\r\n\r\n    addPadding(message) {\r\n        let paddedMessage = message;\r\n        while (paddedMessage.length % 4 !== 0) {\r\n            paddedMessage += \" \";\r\n        }\r\n        return paddedMessage;\r\n    }\r\n\r\n    encryptBlock({originalBinary, keys, IP, P, FP, isSavedInState}) {\r\n        // Encrypts each 64 bit block\r\n        const N_BITS = 64;\r\n        let output = \"\";\r\n        let isFirstRound = isSavedInState;\r\n\r\n        for (let block of _.chunk(originalBinary, N_BITS).map(b => b.join(''))) {\r\n            const initialPermutation = permutate(block, IP);\r\n\r\n            // 16 DES Rounds\r\n            const afterDESRounds = DESRounds({\r\n                input: initialPermutation,\r\n                keys,\r\n                P,\r\n                isFirstRound,\r\n                initialCallback: (L0, R0, expandedR0, xorWithKey, afterSBox, permutatedBlock, xorWithLeft) =>\r\n                    this.setState({\r\n                        afterInitialPermutation: initialPermutation,\r\n                        L0: L0,\r\n                        R0: R0,\r\n                        afterExpansionBox: expandedR0,\r\n                        afterXorWithKey: xorWithKey,\r\n                        afterSBox: afterSBox,\r\n                        afterPermutation: permutatedBlock,\r\n                        afterXorWithLeft: xorWithLeft\r\n                    }),\r\n                halvesCallback: isSavedInState ? (halves => this.setState({ halves })) : (() => {}),\r\n            });\r\n\r\n            isFirstRound = false;\r\n\r\n            const finalPermutation = permutate(afterDESRounds, FP);\r\n            output += finalPermutation;\r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n    doEncryption() {\r\n        // Generate the key\r\n        let binaryKey = strToBits(this.state.key.substring(0, 4));\r\n\r\n        const keys = this.generateKeys({\r\n            originalKey: binaryKey,\r\n            PC1: makePermutationTable(64, 56),\r\n            PC2: makePermutationTable(56, 48),\r\n        });\r\n\r\n        // Padding the plaintext message so that the message is composed of 64 bit sections (4 characters sections)\r\n        const paddedMessage = this.addPadding(this.state.plaintext);\r\n\r\n        // Generate the binary message\r\n        const binaryMessage = strToBits(paddedMessage);\r\n\r\n        console.log(`Original Message: ${binaryMessage}`);\r\n\r\n        const IP = [57, 49, 41, 33, 25, 17, 9, 1, 59, 51, 43, 35, 27, 19, 11, 3, 61, 53, 45, 37, 29, 21, 13, 5, 63, 55, 47, 39, 31, 23, 15, 7, 56, 48, 40, 32, 24, 16, 8, 0, 58, 50, 42, 34, 26, 18, 10, 2, 60, 52, 44, 36, 28, 20, 12, 4, 62, 54, 46, 38, 30, 22, 14, 6];\r\n        const P = makePermutationTable(32, 32);\r\n        const FP = [39, 7, 47, 15, 55, 23, 63, 31, 38, 6, 46, 14, 54, 22, 62, 30, 37, 5, 45, 13, 53, 21, 61, 29, 36, 4, 44, 12, 52, 20, 60, 28, 35, 3, 43, 11, 51, 19, 59, 27, 34, 2, 42, 10, 50, 18, 58, 26, 33, 1, 41, 9, 49, 17, 57, 25, 32, 0, 40, 8, 48, 16, 56, 24];\r\n\r\n        // Generate encrypted message\r\n        const encryptedBinary = this.encryptBlock({\r\n            originalBinary: binaryMessage,\r\n            keys,\r\n            IP,\r\n            P,\r\n            FP,\r\n            isSavedInState: true,\r\n        });\r\n\r\n        // Convert encrypted number to characters for the encrypted message\r\n        this.setState({\r\n            encryptedBits: encryptedBinary,\r\n            keys: keys,\r\n            first64BitBlock: paddedMessage.substring(0, 4),\r\n            first64Bits: strToBits(paddedMessage.substring(0, 4)),\r\n            IP: IP,\r\n            permutationBox: P\r\n        })\r\n\r\n        this.doDecryption({\r\n            cipherbits: encryptedBinary,\r\n            keys,\r\n            IP,\r\n            P,\r\n            FP,\r\n        });\r\n    }\r\n\r\n    doDecryption({cipherbits, keys, IP, FP, P}) {\r\n        const decryptedBinary = this.encryptBlock({\r\n            originalBinary: cipherbits,\r\n            keys: keys.reverse(),\r\n            IP,\r\n            P,\r\n            FP,\r\n            isSavedInState: false\r\n        });\r\n\r\n        const decryptedMessage = this.bitsToHex(decryptedBinary);\r\n        console.log(`Decrypted Message: ${decryptedMessage}`);\r\n        console.log(`Decrypted Message: ${bitsToStr(decryptedBinary)}`);\r\n        this.setState({\r\n            decryptedCiphertext: bitsToStr(decryptedBinary),\r\n        })\r\n    }\r\n\r\n    bitsToHex(bits) {\r\n        let hex = \"\";\r\n        for (let i = 0; i < bits.length; i = i + 16) {\r\n            hex += parseInt(bits.substring(i, i + 16), 2).toString(16).padStart(4, \"0\");\r\n        }\r\n        return hex;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Page title=\"DES\">\r\n                <div style={{textAlign: 'left'}}>\r\n                    <Form>\r\n                        <Form.Group controlId=\"EncryptUpdate\">\r\n                            <Form.Label>Message</Form.Label>\r\n                            <Form.Control type=\"text\" value={this.state.plaintext}\r\n                                          onChange={this.handleUpdate.bind(this, 'plaintext')}\r\n                                          placeholder=\"Message to Encrypt\"/>\r\n                            <Form.Text className=\"text-muted\">\r\n                                This is the plain text information you want to share.\r\n                            </Form.Text>\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"KeyControl\">\r\n                            <Form.Label>Key</Form.Label>\r\n                            <Form.Control type=\"text\" value={this.state.key}\r\n                                          onChange={this.handleUpdate.bind(this, 'key')}\r\n                                          placeholder=\"Key to Use\"/>\r\n                            <Form.Text className=\"text-muted\">\r\n                                The key to use (any string of 4 characters)\r\n                            </Form.Text>\r\n                        </Form.Group>\r\n                        <div style={{textAlign: 'center'}}>\r\n                            <Button variant=\"primary\" onClick={this.doEncryption}>\r\n                                Encrypt\r\n                            </Button>\r\n                        </div>\r\n                    </Form>\r\n                    <br/>\r\n                    <div className=\"section\">\r\n                        <h1>Key Generation</h1>\r\n                        <p>DES uses a 64-bit key to encrypt the plaintext message. This 64-bit key is used to generate\r\n                            16\r\n                            distinct 48-bit keys, which are used in series to encrypt the message.</p>\r\n                    </div>\r\n                    <div className=\"section\">\r\n                        <h3>Key Input</h3>\r\n                        <p>A 4-character string can be used as the 64-bit key because each character can be converted to\r\n                            a 16-bit UTF-16 character code. The key you provided is converted to a 64-bit binary value\r\n                            as shown below</p>\r\n                        <br/>\r\n                        <div style={{textAlign: 'center'}}>\r\n                            <UTFDisplay ascii={this.state.key.substring(0, 4)}/>\r\n                            <br/>\r\n                            <br/>\r\n                            <BinaryDisplay label=\"Your key\"\r\n                                           bits={strToBits(this.state.key.substring(0, 4))}/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"section\">\r\n                        <h3>Generated Keys</h3>\r\n                        {this.state.keys.reverse().map((key, n) => (\r\n                            <BinaryDisplay\r\n                                key={n}\r\n                                label={`$K_{${n + 1}}$`}\r\n                                bits={key}\r\n                            />\r\n                        ))}\r\n                    </div>\r\n                    <div className=\"section\">\r\n                        <h1>Encryption</h1>\r\n                        <p>DES encrypts a message by separating it into 64-bit pieces, and encrypting them one-by-one.\r\n                            For a simple string, this means the message will be encrypted in blocks of four\r\n                            characters.</p>\r\n                        <p>The first block of your message is converted to bits as follows</p>\r\n                        <br/>\r\n                        <div style={{textAlign: 'center'}}>\r\n                            <UTFDisplay ascii={this.state.first64BitBlock}/>\r\n                            <br/>\r\n                            <br/>\r\n                            <BinaryDisplay label=\"Binary\" bits={this.state.first64Bits}/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"section\">\r\n                        <h4>Algorithm Overview</h4>\r\n                        <p>\r\n                            <b>Initial Permutation</b>\r\n                            <br/>\r\n                            The first step in DES is to rearrange the bits in the first block using a permutation\r\n                            table, <Latex>$IP$</Latex>.\r\n                        </p>\r\n                        <p>\r\n                            <b>DES Rounds</b>\r\n                            <br/>\r\n                            The encryption process consists of 16 rounds, which correspond to the 16 generated keys.\r\n                            Before the first round, the message is split into left and right\r\n                            halves: <Latex>$L_0$</Latex> and <Latex>$R_0$</Latex>. Each round, the left and right hand\r\n                            sides are modified, so in\r\n                            the <Latex>$n$</Latex><sup>th</sup> round <Latex>$L_n$</Latex> and <Latex>$R_n$</Latex> are\r\n                            defined as…\r\n                        </p>\r\n                        <p style={{textAlign: 'center'}}>\r\n                            <div style={{display: 'inline-block', textAlign: 'left'}}>\r\n                                <Latex>{'$$L_n=R_{n-1}$$'}</Latex>\r\n                                <br/>\r\n                                <Latex>{'$$R_n=L_{n-1} \\\\oplus f(R_{n-1},K_n)$$'}</Latex>\r\n                            </div>\r\n                        </p>\r\n                        <p>where <Latex>$\\oplus$</Latex> is a bitwise XOR, and <Latex>$f$</Latex> is a function that\r\n                            scrambles <Latex>{`$R_{n-1}$`}</Latex> using <Latex>$K_n$</Latex>.</p>\r\n                        <p>\r\n                            <b>Final Permutation</b>\r\n                            <br/>\r\n                            <p>After the 16th round, the final 32-bit <Latex>{`$L_{16}$ and $R_{16}$`}</Latex> are\r\n                                swapped and joined back together into a 64-bit message. The bits of this message are\r\n                                rearranged\r\n                                again using another permutation table, <Latex>{`$IP^{-1}$`}</Latex>, which yields the\r\n                                final encrypted message!</p>\r\n                        </p>\r\n                        <p>\r\n                            <b>And… Repeat!</b>\r\n                            <br/>\r\n                            <p>This process is repeated for each 64-bit block of the message to encrypt the whole\r\n                                thing.</p>\r\n                        </p>\r\n                    </div>\r\n                    <div className=\"section\">\r\n                        <h4>Initial Permutation <Latex>$(IP)$</Latex></h4>\r\n                        <p>Permutation is the act of mapping each input bit to a new output position. In this\r\n                            permutation, the input is 64 bits and the output is 64 bits, no bits are lost or created,\r\n                            instead each and every bit is mapped to a single new location. For example, since the first\r\n                            entry in the permutation table is {this.state.IP[0]}, the bit at that index in the input\r\n                            becomes the first bit of the output.</p>\r\n                        <div style={{display: 'flex', justifyContent: 'center', alignItems: 'center'}}>\r\n                            <Latex>$IP=$</Latex>&nbsp;\r\n                            <PermutationTable table={this.state.IP} columns={8}/>\r\n                        </div>\r\n                        <br/>\r\n                        <BinaryDisplay label=\"Before Permuting\" bits={this.state.first64Bits}/>\r\n                        <BinaryDisplay label=\"After Permuting\" bits={this.state.afterInitialPermutation}/>\r\n                    </div>\r\n                    <div className=\"section\">\r\n                        <h4>DES Rounds</h4>\r\n                        <p>This permuted message is then split into <Latex>$L_0$ and $R_0$</Latex>, as follows…</p>\r\n                        <p className=\"text-center\">\r\n                            <Latex>{`$\\\\underbrace{${this.state.L0}}_{L0}\\\\text{ }\\\\underbrace{${this.state.R0}}_{R0}$`}</Latex>\r\n                        </p>\r\n                        <br/>\r\n                        <p>After this, each <Latex>$L_n$</Latex> and <Latex>$R_n$</Latex> are computed as &nbsp;\r\n                            <Latex>{'$L_n=R_{n-1}$ and $R_n=L_{n-1} \\\\oplus f(R_{n-1},K_n)$.'}</Latex>\r\n                        </p>\r\n                        <p>This is repeated until <Latex>{'$L_{16}$ and $R_{16}$'}</Latex> are computed.</p>\r\n                        <Card style={{padding: '0.5em 1em'}}>\r\n                            <Collapsible trigger={<Latex>$f$ function (show more)</Latex>}\r\n                                         triggerWhenOpen={<Latex>$f$ function (hide)</Latex>}>\r\n                                <div className=\"section\">\r\n                                    <p><b>Overview of f function</b>\r\n                                        <br/>\r\n                                        The f function takes the right side of the 64-bit input, expands it to 48 bits,\r\n                                        XORs it with the corresponding key, shrinks it back down to 32 bits, permutates\r\n                                        the bits, and XORs it with the left side. This is done 16 times.\r\n                                    </p>\r\n                                </div>\r\n                                <div className=\"section\">\r\n                                    <p><b>Expansion Box</b>\r\n                                        <br/>\r\n                                        This operation expands <Latex>$R_i$</Latex> from 32 bits to 48 bits. This done\r\n                                        by\r\n                                        using this permutation table to repeat certain bits in order to make the right\r\n                                        side\r\n                                        longer.\r\n                                    </p>\r\n                                    <div style={{display: 'flex', justifyContent: 'center', alignItems: 'center'}}>\r\n                                        <Latex>Expansion Permutation$=$</Latex>&nbsp;\r\n                                        <PermutationTable table={expansionBox} columns={8}/>\r\n                                    </div>\r\n                                    <p><BinaryDisplay label=\"Initial Right Side\" bits={this.state.R0}/></p>\r\n                                    <p><BinaryDisplay label=\"After Expansion\" bits={this.state.afterExpansionBox}/></p>\r\n                                </div>\r\n                                <div className=\"section\">\r\n                                    <p><b>XOR</b>\r\n                                        <br/>\r\n                                        The bits are then XORed with the key corresponding to that round. For example,\r\n                                        in the\r\n                                        first round, the bits will be XORed with <Latex>{`$K_1$`}</Latex>, then with\r\n                                        <Latex>{` $K_2$`}</Latex> in the second round, and so forth, until XORing with\r\n                                        <Latex>{` $K_{16}$`}</Latex> in the last round.</p>\r\n                                    <p><BinaryDisplay label=\"The First Key\" bits={this.state.keys[0]}/></p>\r\n                                    <p><BinaryDisplay label=\"After XOR\" bits={this.state.afterXorWithKey}/></p>\r\n                                </div>\r\n                                <div className=\"section\">\r\n                                    <p><b>S-Box Substitution</b></p>\r\n                                    <Card style={{padding: '0.5em 1em'}}>\r\n                                        <Collapsible trigger=\"(show more)\"\r\n                                                     triggerWhenOpen=\"(hide)\">\r\n                                            <p>The S-Box Substitution takes the 48 bit output for the XOR with the key,\r\n                                                and\r\n                                                shrinks it back down to 32 bits. This operation is done by separating\r\n                                                the 48\r\n                                                bits into 8 6-bit block. There are 8 corresponding S-Boxes, which are\r\n                                                each\r\n                                                a 4 by 16 table of 4-bit entries. Each of the 6-bit input blocks is\r\n                                                operated\r\n                                                on by a separate S-box, for example, the first block uses the first\r\n                                                S-Box,\r\n                                                and so forth. The bits in the input block specify the output entry in\r\n                                                the\r\n                                                S-Box table. For an input block of <Latex>$b_1$, $b_2$, $b_3$, $b_4$,\r\n                                                    $b_5$,\r\n                                                    $b_6$</Latex>, the bits <Latex>$b_1$ and $b_6$</Latex> corresponds\r\n                                                to\r\n                                                the row number of the table, while the bits <Latex>$b_2$, $b_3$, $b_4$,\r\n                                                    $b_5$</Latex> denote the column number. The 4-bit output is\r\n                                                retrieved\r\n                                                for the S-Box table using this row and column number. This is repeated\r\n                                                for\r\n                                                all 8 blocks.</p>\r\n                                            <p><BinaryDisplay label=\"First 6 bits of input\"\r\n                                                              bits={this.state.afterXorWithKey.substring(0, 6)}/></p>\r\n                                            <p><BinaryDisplay label=\"Row (formed with the first and last bit of the\r\n                                                input)\"\r\n                                                              bits={this.state.afterXorWithKey.charAt(0) + this.state.afterXorWithKey.charAt(5)}/>\r\n                                            </p>\r\n                                            <p><BinaryDisplay label=\"Column (formed with the middle 4 bits of the\r\n                                                input)\" bits={this.state.afterXorWithKey.substring(1, 5)}/></p>\r\n                                            <p>Using the row and column calculated above, the corresponding table entry\r\n                                                at\r\n                                                that location is the new output.</p>\r\n                                            <div style={{\r\n                                                display: 'flex',\r\n                                                justifyContent: 'center',\r\n                                                alignItems: 'center'\r\n                                            }}>\r\n                                                <Latex>S-Box$=$</Latex>&nbsp;\r\n                                                <PermutationTable table={sBoxes[0]} columns={16} showIndices={false}/>\r\n                                            </div>\r\n                                            <p>The row and column correspond to the entry of value\r\n                                                <Latex>{` ${parseInt(this.state.afterSBox.substring(0, 4), 2)}. `}</Latex>\r\n                                                This is converted to binary to become the output. </p>\r\n                                            <p><BinaryDisplay label=\"Output\"\r\n                                                              bits={this.state.afterSBox.substring(0, 4)}/></p>\r\n                                        </Collapsible>\r\n                                    </Card>\r\n                                </div>\r\n                                <div className=\"section\">\r\n                                    <p><b>Permutation</b>\r\n                                        <br/>\r\n                                        The bits are then permutated again with a different permutation table.</p>\r\n                                    <div style={{display: 'flex', justifyContent: 'center', alignItems: 'center'}}>\r\n                                        <Latex>$P=$</Latex>&nbsp;\r\n                                        <PermutationTable table={this.state.permutationBox} columns={8}/>\r\n                                    </div>\r\n                                    <p><BinaryDisplay label=\"After Permutation\" bits={this.state.afterPermutation}/></p>\r\n                                </div>\r\n                                <div className=\"section\">\r\n                                    <p><b>XOR</b>\r\n                                        <br/>\r\n                                        It is then XORed with the initial left side. This produces the right side for\r\n                                        the next round.\r\n                                        <BinaryDisplay label=\"After XOR\" bits={this.state.afterXorWithLeft}/></p>\r\n                                </div>\r\n                                <p className=\"text-center\">\r\n                                    <Latex>{`$\\\\underbrace{${this.state.R0}}_{L1}\\\\text{ }\\\\underbrace{${this.state.afterXorWithLeft}}_{R1}$`}</Latex>\r\n                                </p>\r\n                                <div className=\"section\">\r\n                                    <p>\r\n                                        <b>And… Repeat!</b>\r\n                                        <br/>\r\n                                        <p>This process is repeated another 15 times to complete the 16 rounds of DES\r\n                                            encryption.</p>\r\n                                    </p>\r\n                                </div>\r\n                            </Collapsible>\r\n                        </Card>\r\n                        <br/>\r\n                        <Card style={{padding: '0.5em 1em'}}>\r\n                            <Collapsible trigger=\"See the results of the DES rounds\" triggerWhenOpen=\"Hide\">\r\n                                {(this.state.halves || []).map(([L, R], n) => (\r\n                                    <p className=\"text-center\" key={n}>\r\n                                        <Latex>{`$\\\\underbrace{${L}}_{L_{${n}}}\\\\text{ }\\\\underbrace{${R}}_{R_{${n}}}$`}</Latex>\r\n                                    </p>\r\n                                ))}\r\n                            </Collapsible>\r\n                        </Card>\r\n                        <br />\r\n                    </div>\r\n                    <div>\r\n                        <h4>Final Permutation</h4>\r\n                        <p>\r\n                            <Latex>{'$L_{16}$ and $R_{16}$'}</Latex> are then combined, and permuted using the final\r\n                            permutation table <Latex>{'$IP^{-1}$'}</Latex>, which yields the final encrypted message.\r\n                        </p>\r\n                    </div>\r\n                    <div className=\"section\">\r\n                        <h1>Results</h1>\r\n                        <Table bordered>\r\n                            <thead>\r\n                            <tr>\r\n                                <th />\r\n                                <th>Input</th>\r\n                                <th>Output</th>\r\n                            </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                            <tr>\r\n                                <td><span style={{ whiteSpace: 'nowrap' }}>UTF-8</span></td>\r\n                                <td>{this.state.plaintext}</td>\r\n                                <td>{bitsToStr(this.state.encryptedBits)}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Hex</td>\r\n                                <td style={{ wordBreak: 'break-word' }}>{this.bitsToHex(strToBits(this.state.plaintext))}</td>\r\n                                <td style={{ wordBreak: 'break-word' }}>{this.bitsToHex(this.state.encryptedBits)}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Binary</td>\r\n                                <td style={{ fontFamily: 'monospace', fontSize: '0.8rem', wordBreak: 'break-word' }}>\r\n                                    {strToBits(this.state.plaintext)}\r\n                                </td>\r\n                                <td style={{ fontFamily: 'monospace', fontSize: '0.8rem', wordBreak: 'break-word' }}>\r\n                                    {this.state.encryptedBits}\r\n                                </td>\r\n                            </tr>\r\n                            </tbody>\r\n                        </Table>\r\n                    </div>\r\n                    <div className=\"section\">\r\n                        <h1>Decryption</h1>\r\n                        <p>DES decrypts a message using the same algorithm in the same order, but with the keys in\r\n                            reverse.\r\n                            In other words, if the encryption keys\r\n                            are <br/><Latex>{'$K_1$, $K_2$, $K_3$,...,$K_{16}$'}</Latex>,\r\n                            then the decryption keys are <Latex>{'$K_{16}$, $K_{15}$, $K_{14}$,...,$K_1$'}</Latex>.\r\n                            Whereas before the plaintext message and the keys were inputted and the ciphertext was the\r\n                            result,\r\n                            now the ciphertext and the reversed keys are inputted and the original plaintext message is\r\n                            the result. </p>\r\n                        <br/>\r\n                        <p>The decrypted message: <b>{this.state.decryptedCiphertext}</b></p>\r\n                    </div>\r\n                </div>\r\n            </Page>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DesPage;\r\n","/* eslint-disable */\r\nimport React, {useEffect, useState} from 'react';\r\nimport Page from '../components/shared/page';\r\nimport Nav from '../components/Nav';\r\nimport '../components/styling/RSA.css';\r\nimport {ListGroup, Form} from 'react-bootstrap';\r\nimport Latex from 'react-latex';\r\n\r\n/**\r\n * About Page Wrapper, relies on React Router for routing to here\r\n */\r\n\r\n/* global BigInt */\r\nfunction ascii_encrypt(message) {\r\n    var i;\r\n    var text = \"\";\r\n    for (i = 0; i < message.length; i++) {\r\n        text += message.charCodeAt(i) + \" \";\r\n    }\r\n    text = text.substring(0, text.length - 1);\r\n    return text;\r\n}\r\n\r\nfunction ascii_decrypt(message) {\r\n    message = message.split(' ');\r\n    var i;\r\n    var text = '';\r\n    for (i = 0; i < message.length; i++) {\r\n        text += String.fromCharCode(parseInt(message[i]));\r\n    }\r\n    return text;\r\n}\r\n\r\nfunction calc_n(p, q) {\r\n    return p * q;\r\n}\r\n\r\nfunction calc_phi_n(p, q) {\r\n    return (p - 1) * (q - 1);\r\n}\r\n\r\n// Assume input message is ascii encrypted\r\nfunction rsa_encrypt(message, e, N) {\r\n    if (message === '' || N === 0) {\r\n        return ''\r\n    }\r\n    message = message.split(' ');\r\n    var i;\r\n    var text = \"\";\r\n    for (i = 0; i < message.length; i++) {\r\n        text += Number((BigInt(parseInt(message[i])) ** BigInt(e)) % BigInt(N)) + ' ';\r\n    }\r\n    text = text.substring(0, text.length - 1);\r\n    return text;\r\n}\r\n\r\n// Assume input message is rsa encrypted (message = c)\r\nfunction rsa_decrypt(message, d, N) {\r\n    if (message === '' || N === 0) {\r\n        return ''\r\n    }\r\n    message = message.split(' ');\r\n    var i;\r\n    var text = \"\";\r\n    for (i = 0; i < message.length; i++) {\r\n        text += Number((BigInt(parseInt(message[i])) ** BigInt(d)) % BigInt(N)) + ' ';\r\n    }\r\n    text = text.substring(0, text.length - 1);\r\n    return text;\r\n}\r\n\r\n// console.log('I aint never seen 2 pretty best friends');\r\n// console.log(ascii_encrypt('I aint never seen 2 pretty best friends'));\r\n// console.log(rsa_encrypt(ascii_encrypt('I aint never seen 2 pretty best friends'), 47, 3127));\r\n// console.log(rsa_decrypt(rsa_encrypt(ascii_encrypt('I aint never seen 2 pretty best friends'), 47, 3127), 2631, 3127));\r\n// console.log(ascii_decrypt(rsa_decrypt(rsa_encrypt(ascii_encrypt('I aint never seen 2 pretty best friends'), 47, 3127), 2631, 3127)));\r\n\r\nfunction gcd(a, b) {\r\n    if ((typeof a !== 'number') || (typeof a !== 'number'))\r\n        return false;\r\n    while (b) {\r\n        var t = b;\r\n        b = a % b;\r\n        a = t;\r\n    }\r\n    return a;\r\n}\r\n\r\nfunction isPrime(val) {\r\n    if (val == 0) {\r\n        return ''\r\n    }\r\n\r\n    for (var i = 2; i <= Math.sqrt(val); i++) {\r\n        if (val % i === 0) {\r\n            return 'Invalid value';\r\n        }\r\n    }\r\n\r\n    if (val > 1) {\r\n        return 'Valid value';\r\n    } else {\r\n        return 'Invalid value';\r\n    }\r\n}\r\n\r\nfunction isValid_e(e, p, q) {\r\n    if (e == 0 || p == 0 || q == 0) {\r\n        return '';\r\n    }\r\n\r\n    var N = calc_n(p, q);\r\n    var phi = calc_phi_n(p, q);\r\n    if (e <= 1 || e >= phi) {\r\n        return 'Invalid value';\r\n    } else if (gcd(e, N) > 1) {\r\n        return 'Invalid value';\r\n    } else if (gcd(e, phi) > 1) {\r\n        return 'Invalid value';\r\n    } else {\r\n        return 'Valid value';\r\n    }\r\n}\r\n\r\nfunction generate_e(p, q) {\r\n    if (p == 0 || q == 0) {\r\n        return '';\r\n    }\r\n    var N = calc_n(p, q);\r\n    var phi = calc_phi_n(p, q);\r\n    var res = \"\";\r\n    var i;\r\n\r\n    let count = phi < 1000 ? phi : 1000\r\n\r\n    for (i = 2; i < count; i++) {\r\n        if (gcd(i, N) > 1 || gcd(i, phi) > 1) {\r\n            continue\r\n        } else {\r\n            res += i.toString() + \", \";\r\n        }\r\n    }\r\n    return res\r\n}\r\n\r\nfunction isValid_d(d, e, p, q) {\r\n    if (d == 0 || e == 0 || p == 0 || q == 0) {\r\n        return '';\r\n    }\r\n\r\n    var phi = calc_phi_n(p, q);\r\n    var mod = (d * e) % phi;\r\n    if (mod === 1) {\r\n        return 'Valid value';\r\n    } else {\r\n        return 'Invalid value';\r\n    }\r\n}\r\n\r\nfunction generate_d(e, p, q) {\r\n    if (e == 0 || p == 0 || q == 0) {\r\n        return '';\r\n    }\r\n\r\n    var phi = calc_phi_n(p, q);\r\n    var res = \"\";\r\n    var i;\r\n\r\n    for (i = 1; i < 5*phi; i++) {\r\n        var mod = (i * e) % phi;\r\n\r\n        if (mod === 1) {\r\n            res += i.toString() + \", \";\r\n        } else {\r\n            continue;\r\n        }\r\n    }\r\n\r\n    return res;\r\n}\r\n\r\nconst RsaPage = () => {\r\n\r\n    // keeps track of p and q values and uses set function in inputs\r\n    const [p, setP] = useState('');\r\n    const [q, setQ] = useState('');\r\n    const [n, setN] = useState('');\r\n    const [phi, setPhi] = useState('');\r\n    const [e, setE] = useState('');\r\n    const [d, setD] = useState('');\r\n    const [message, setMessage] = useState('');\r\n    const [ascii_encrypted, setASCIIencrypt] = useState('');\r\n    const [rsa_encrypted, setRSAencrypt] = useState('');\r\n    const [rsa_decrypted, setRSAdecrypt] = useState('');\r\n    const [ascii_decrypted, setASCIIdecrypt] = useState('');\r\n\r\n\r\n    // only called when p or q changes, updates n using the function\r\n    useEffect(() => {\r\n        setN(calc_n(p, q))\r\n    }, [p, q])\r\n\r\n    useEffect(() => {\r\n        setPhi(calc_phi_n(p, q))\r\n    }, [p, q])\r\n\r\n    useEffect(() => {\r\n        setASCIIencrypt(ascii_encrypt(message))\r\n    }, [message])\r\n\r\n    useEffect(() => {\r\n        setRSAencrypt(rsa_encrypt(ascii_encrypted, e, n))\r\n    }, [ascii_encrypted, e, n])\r\n\r\n    useEffect(() => {\r\n        setRSAdecrypt(rsa_decrypt(rsa_encrypted, d, n))\r\n    }, [rsa_encrypted, d, n])\r\n\r\n    useEffect(() => {\r\n        setASCIIdecrypt(ascii_decrypt(rsa_decrypted))\r\n    }, [rsa_decrypted])\r\n\r\n    return (\r\n        <Page title=\"RSA\">\r\n            <ListGroup className='steps'>\r\n                <h2>Key Generation</h2>\r\n                <ListGroup.Item>\r\n                    <p>\r\n                        <Latex>Receiver (decryptor) picks two prime numbers: $(p, q)$</Latex>\r\n                    </p>\r\n                    <div className='user-input'>\r\n                        <Form.Group className='form-inline'>\r\n                            <Form.Label>\r\n                                <Latex>$p:\\ $ </Latex>\r\n                            </Form.Label>\r\n                            <Form.Control type='number' placeholder='enter p' value={p}\r\n                                          onChange={event => setP(event.target.value)}/>\r\n                        </Form.Group>\r\n                        <p>{isPrime(p)}</p>\r\n\r\n                        <Form.Group className='form-inline'>\r\n                            <Form.Label>\r\n                                <Latex>$q:\\ $ </Latex>\r\n                            </Form.Label>\r\n                            <Form.Control type='number' placeholder='enter q' value={q}\r\n                                          onChange={event => setQ(event.target.value)}/>\r\n                        </Form.Group>\r\n                        <p>{isPrime(q)}</p>\r\n\r\n                    </div>\r\n                </ListGroup.Item>\r\n\r\n                <ListGroup.Item>\r\n                    <p>The product of p and q will become half of the public key</p>\r\n                    <p>\r\n                        <Latex>We calculate $n = p \\times q$:</Latex>\r\n                    </p>\r\n                    <p>\r\n                        <Latex>$n =\\ $</Latex>\r\n                        {n}\r\n                    </p>\r\n                </ListGroup.Item>\r\n\r\n                <ListGroup.Item>\r\n                    <p>\r\n                        <p>Using Euler's Totient Function, we calculate <Latex>$\\phi(n)$</Latex> which is the number of positive integers less than n that are coprime to n.</p>\r\n                        <strong>\r\n                            <Latex>$\\phi$ function: </Latex>\r\n                        </strong>\r\n                        <Latex>Calcute $\\phi(n) = (p-1)(q-1)$</Latex>\r\n                    </p>\r\n                    <p>\r\n                        <Latex>$\\phi(n) =\\ $</Latex>\r\n                        {phi}\r\n                    </p>\r\n                </ListGroup.Item>\r\n\r\n                <ListGroup.Item>\r\n                    <p>\r\n                        A number <em>e</em> is a relatively prime number to <Latex>$\\phi$(n)</Latex> that will be the other half of the public key\r\n                    </p>\r\n                    <p>\r\n                        <Latex>Receiver (decryptor) picks encryption number e: </Latex>\r\n                    </p>\r\n                    {/* Use isValid_e here */}\r\n                    <div className='user-input'>\r\n                        <Form.Group className='form-inline'>\r\n                            <Form.Label>\r\n                                <Latex>$e:\\ $ </Latex>\r\n                            </Form.Label>\r\n                            <Form.Control type='number' placeholder='enter e' value={e}\r\n                                          onChange={event => setE(event.target.value)}/>\r\n                        </Form.Group>\r\n                        <p>{isValid_e(e, p, q)}</p>\r\n                        <p>Suggestions: {generate_e(p, q)}</p>\r\n                    </div>\r\n                </ListGroup.Item>\r\n\r\n                <ListGroup.Item>\r\n                    <p>\r\n                        <Latex>Public Key Becomes: </Latex>\r\n                    </p>\r\n\r\n                    <p>\r\n                        <Latex>$(e, N) = ($</Latex>\r\n                        {e}\r\n                        <Latex>$, $</Latex>\r\n                        {n}\r\n                        <Latex>$ )$</Latex>\r\n                    </p>\r\n                </ListGroup.Item>\r\n\r\n                <ListGroup.Item>\r\n                    <p>\r\n                        The private key, <em>d</em> a modular inverse of <Latex>$e \\ modulo \\ \\phi (n)$</Latex>\r\n                    </p>\r\n                    <p>\r\n                        <Latex>Receiver (decryptor) picks number d:</Latex>\r\n                    </p>\r\n                    {/* Use isValid_d here */}\r\n                    <div className='user-input'>\r\n                        <Form.Group className='form-inline'>\r\n                            <Form.Label>\r\n                                <Latex>$d:\\ $</Latex>\r\n                            </Form.Label>\r\n                            <Form.Control type='number' placeholder='enter d' value={d}\r\n                                          onChange={event => setD(event.target.value)}/>\r\n                        </Form.Group>\r\n                        <p>{isValid_d(d, e, p, q)}</p>\r\n                        <p>Suggestions: {generate_d(e, p, q)}</p>\r\n                    </div>\r\n                </ListGroup.Item>\r\n\r\n                <ListGroup.Item>\r\n                    <p>\r\n                        <Latex>The Sender picks a message to encrypt</Latex>\r\n                    </p>\r\n                    <div className='user-input'>\r\n                        <Form.Group className='form-inline'>\r\n                            <Form.Label>\r\n                                <Latex>Message $:\\  $</Latex>\r\n                            </Form.Label>\r\n                            <Form.Control type='text' placeholder='enter message' value={message}\r\n                                          onChange={event => setMessage(event.target.value)}/>\r\n                        </Form.Group>\r\n                    </div>\r\n                </ListGroup.Item>\r\n\r\n                <ListGroup.Item>\r\n                    <p>This message is then converted to a number <em>m</em> which is commonly the ASCII encryption (translation) of the message</p>\r\n                    <p>\r\n                        <Latex>$m:\\ $ </Latex>\r\n                    </p>\r\n                    <p>\r\n                        {/* Use ascii_encrypt() here, since we're not rendering anything on screen, we call it as a function */}\r\n                        {ascii_encrypted}\r\n                    </p>\r\n                </ListGroup.Item>\r\n\r\n                <ListGroup.Item>\r\n                    <p>\r\n                        <Latex>The Sender sends RSA Encrypted sequence (ciphertext) which is calculated by the following formula </Latex>\r\n                    </p>\r\n                    <p>\r\n                        <Latex>$m^e\\:mod\\:(n)\\:=\\:c$</Latex>\r\n                        {/* Use rsa_encrypt() here, with message = ascii_encrypt() */}\r\n                        <br/>\r\n                        {rsa_encrypted}\r\n                    </p>\r\n                </ListGroup.Item>\r\n\r\n                <ListGroup.Item>\r\n                    <p>\r\n                        <Latex>Receiver (decryptor) decrypts ciphertext $c$ and recieves the ASCII ciphered message m, which is calculated by the following formula</Latex>\r\n                    </p>\r\n                    <p>\r\n                        <Latex>$c^d\\:mod\\:(n)\\:=m$</Latex>\r\n                        {/* Use rsa_encrypt() here, with message = ascii_encrypt() */}\r\n                        <br/>\r\n                        {rsa_decrypted}\r\n                    </p>\r\n                </ListGroup.Item>\r\n\r\n                <ListGroup.Item>\r\n                    <p>\r\n                        <Latex>Finally, the receiver calculates the ASCII Decryption and recieves the plaintext original message: </Latex>\r\n                    </p>\r\n                    <p>\r\n                        {/* Use ascii_decrypt() here, with message = m from c^d mod N */}\r\n                        {ascii_decrypted}\r\n                    </p>\r\n                </ListGroup.Item>\r\n            </ListGroup>\r\n        </Page>\r\n    );\r\n};\r\nexport default RsaPage;\r\n","import React from 'react';\r\nimport {Form, Button} from 'react-bootstrap';\r\nimport Page from \"../components/shared/page\";\r\nimport Latex from 'react-latex'\r\n//import bitsToStr from \"../bit-handling-2\";\r\n//import { result } from 'lodash';\r\n\r\n// The cycle for actual bit manipulation\r\nfunction md5cycle(x, k) {\r\n   // The initial variables of the rotates\r\n   var a = x[0], b = x[1], c = x[2], d = x[3];\r\n\r\n   // The rotation amounts specialized to md5\r\n   let rotate_amounts = [7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22,\r\n      5,  9, 14, 20, 5,  9, 14, 20, 5,  9, 14, 20, 5,  9, 14, 20,\r\n      4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23,\r\n      6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21]\r\n\r\n   // Generate the unique sine based values to be factored in\r\n   let K = getDefaults()\r\n\r\n   // The actual looping of md5\r\n   for (let index = 0; index < 64; index++) {\r\n      // F stores the newly computed value\r\n      let F = 0x00000000\r\n      let g = 0\r\n      if (index < 16) {\r\n         g = index\r\n         F = ff(a, b, c, d, k[g], rotate_amounts[index], K[index]);\r\n      }\r\n      else if (index >= 16 && index < 32) {\r\n         g = (5 * index + 1) % 16\r\n         F = gg(a, b, c, d, k[g], rotate_amounts[index], K[index]);\r\n      }\r\n      else if (index >= 32 && index < 48) {\r\n         g = (3 * index + 5) % 16\r\n         F = hh(a, b, c, d, k[g], rotate_amounts[index], K[index]);\r\n      }\r\n      else if (index >= 48) {\r\n         g = (7 * index) % 16\r\n         F = ii(a, b, c, d, k[g], rotate_amounts[index], K[index]);\r\n      }\r\n      // actually rotate them\r\n      a = d\r\n      d = c\r\n      c = b\r\n      b = F\r\n   }\r\n\r\n   // Make sure the addition always take place in 32 bit space\r\n   x[0] = add32(a, x[0]);\r\n   x[1] = add32(b, x[1]);\r\n   x[2] = add32(c, x[2]);\r\n   x[3] = add32(d, x[3]);\r\n\r\n   // Return happens since the values in x are returned\r\n}\r\n\r\n// This does the addditions and rotations of the bits\r\nfunction collect(q, a, b, x, s, t) {\r\n   a = add32(add32(a, q), add32(x, t));\r\n   /// The right shift is to make it a circular shift\r\n   return add32((a << s) | (a >>> (32 - s)), b);\r\n}\r\n\r\n// These are the functions defined by MD5\r\nfunction ff(a, b, c, d, x, s, t) {\r\n   return collect((b & c) | ((~b) & d), a, b, x, s, t);\r\n}\r\n\r\nfunction gg(a, b, c, d, x, s, t) {\r\n   return collect((b & d) | (c & (~d)), a, b, x, s, t);\r\n}\r\n\r\nfunction hh(a, b, c, d, x, s, t) {\r\n   return collect(b ^ c ^ d, a, b, x, s, t);\r\n}\r\n\r\nfunction ii(a, b, c, d, x, s, t) {\r\n   return collect(c ^ (b | (~d)), a, b, x, s, t);\r\n}\r\n\r\n// The quickest way to make sure the result is in 32 bit space\r\nfunction add32(a, b) {\r\n   return (a + b) & 0xFFFFFFFF\r\n}\r\n\r\n// MD5 function to gernerate some seed numbers\r\nfunction getDefaults() {\r\n   let K = []\r\n   for (let i = 0; i < 64; i++) {\r\n      K.push(Math.floor((2 ** 32) * Math.abs(Math.sin(i + 1))))\r\n   }\r\n   return K\r\n}\r\n\r\nfunction makeMD5(s) {\r\n   var n = s.length\r\n   let i\r\n\r\n   // Defined by MD5\r\n   let initials = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476]\r\n   var hash = initials\r\n\r\n   // Loop over the string in 512 bit increments to build the resulting string\r\n   //     64 characters at 8 bits a character is 512\r\n   for (i = 64; i <= n; i += 64) {\r\n      let block = md5block(s.substring(i - 64, i))\r\n      md5cycle(hash, block);\r\n   }\r\n\r\n   // isolate the final string\r\n   s = s.substring(i - 64);\r\n\r\n   // The last block\r\n   var tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n\r\n   // Build the block with the characters in the approapriate form\r\n   //     Lower bits come first\r\n   for (i = 0; i < s.length; i++)\r\n      tail[i >> 2] |= s.charCodeAt(i) << ((i % 4) << 3);\r\n\r\n   // Set the leading 1 bit of the buffer\r\n   tail[i >> 2] |= 0x80 << ((i % 4) << 3);\r\n\r\n   // If the string took up too much space, make another block essentially\r\n   if (i > 55) {\r\n      md5cycle(hash, tail);\r\n      for (i = 0; i < 16; i++) {\r\n         tail[i] = 0;\r\n      }\r\n   }\r\n\r\n   // describe the size of size of the entire message which goes on the end\r\n   tail[14] = (n * 8) % (2 ** 64);\r\n\r\n   // Hash the last block\r\n   md5cycle(hash, tail);\r\n\r\n   // hash has always been holding the result, so now return it\r\n   return hash;\r\n}\r\n\r\n// Make the md5 blocks\r\nfunction md5block(s) {\r\n   // store the set of blocks as the result, must be 512 \"bits\" in response\r\n   let md5blocks = [];\r\n   for (let i = 0; i < 64; i += 4) {\r\n      // Store first charater in the lowest of the bits\r\n      md5blocks[i >> 2] = s.charCodeAt(i)\r\n         + (s.charCodeAt(i + 1) << 8)\r\n         + (s.charCodeAt(i + 2) << 16)\r\n         + (s.charCodeAt(i + 3) << 24);\r\n   }\r\n   return md5blocks;\r\n}\r\n\r\n// Actually print it in a readable HEX format\r\nfunction makeHex(n) {\r\n   let hex_chr = '0123456789ABCDEF'.split('');\r\n   let s = '';\r\n   for (let index = 0; index < 4; index++)\r\n      s += hex_chr[(n >> (index * 8 + 4)) & 0x0F]\r\n         + hex_chr[(n >> (index * 8)) & 0x0F];\r\n   return s;\r\n}\r\n\r\n// Loop over to join all the appropriate hex values together\r\nfunction hex(x) {\r\n   for (var i = 0; i < x.length; i++)\r\n      x[i] = makeHex(x[i]);\r\n   return x.join('');\r\n}\r\n\r\n// Calls all that is needed to return the text output of MD5\r\nfunction md5(message) {\r\n   return hex(makeMD5(message));\r\n}\r\n\r\n\r\nfunction makeDisplayBlock(s) {\r\n   let n = s.length\r\n   let result = []\r\n   let i;\r\n   // Loop over the string in 512 bit increments to build the resulting string\r\n   //     64 characters at 8 bits a character is 512\r\n   for (i = 64; i <= n; i += 64) {\r\n      let block = md5block(s.substring(i - 64, i))\r\n      result.push(block)\r\n   }\r\n\r\n   // isolate the final string\r\n   s = s.substring(i - 64);\r\n\r\n   // The last block\r\n   var tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n\r\n   // Build the block with the characters in the approapriate form\r\n   //     Lower bits come first\r\n   for (i = 0; i < s.length; i++)\r\n      tail[i >> 2] |= s.charCodeAt(i) << ((i % 4) << 3);\r\n\r\n   // Set the leading 1 bit of the buffer\r\n   tail[i >> 2] |= 0x80 << ((i % 4) << 3);\r\n\r\n   // If the string took up too much space, make another block essentially\r\n   if (i > 55) {\r\n      result.push(tail)\r\n      for (i = 0; i < 16; i++) {\r\n         tail[i] = 0;\r\n      }\r\n   }\r\n\r\n   // describe the size of size of the entire message which goes on the end\r\n   tail[14] = (n * 8) % (2 ** 64);\r\n\r\n   // Hash the last block\r\n   result.push(tail)\r\n   return(result)\r\n} \r\n\r\nfunction makePretty(arr) {\r\n   let result = \"\"; \r\n   console.log(arr);\r\n   for (let outer = 0; outer < arr.length; outer++) {\r\n      for(let index = 0; index < arr[outer].length; index++) {\r\n         //result += bitsToStr(arr[outer][index])\r\n         result += (arr[outer][index]).toString(2)\r\n         if (index + 1 !== arr[outer].length)\r\n            result += \", \"\r\n      }\r\n   }\r\n   let split_result = result.split(\", \")\r\n   for (let i = 0; i < split_result.length; i++) {\r\n      // make a string of 0s that is 32 - split_result[i].length long\r\n      let zeros = \"\"\r\n      for (let j = split_result[i].length; j < 32; j++) {\r\n         zeros += \"0\"\r\n      }\r\n      split_result[i] = zeros + split_result[i]\r\n   }\r\n   let final_result = \"\";\r\n   for (let i = 0; i < split_result.length; i++) {\r\n      final_result += split_result[i]\r\n      final_result += \", \"\r\n   }\r\n   return final_result.replace(\"-\", \"1\").split(\",\")\r\n\r\n}\r\n\r\n// The cycle for actual bit manipulation\r\nfunction* md5cycleIterations(x, k) {\r\n   // The initial variables of the rotates\r\n   var a = x[0], b = x[1], c = x[2], d = x[3];\r\n\r\n   // The rotation amounts specialized to md5\r\n   let rotate_amounts = [7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22,\r\n      5,  9, 14, 20, 5,  9, 14, 20, 5,  9, 14, 20, 5,  9, 14, 20,\r\n      4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23,\r\n      6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21]\r\n\r\n   // Generate the unique sine based values to be factored in\r\n   let K = getDefaults()\r\n\r\n   // The actual looping of md5\r\n   for (let index = 0; index < 64; index++) {\r\n      // F stores the newly computed value\r\n      let F = 0x00000000\r\n      let g = 0\r\n      if (index < 16) {\r\n         g = index\r\n         F = ff(a, b, c, d, k[g], rotate_amounts[index], K[index]);\r\n      }\r\n      else if (index >= 16 && index < 32) {\r\n         g = (5 * index + 1) % 16\r\n         F = gg(a, b, c, d, k[g], rotate_amounts[index], K[index]);\r\n      }\r\n      else if (index >= 32 && index < 48) {\r\n         g = (3 * index + 5) % 16\r\n         F = hh(a, b, c, d, k[g], rotate_amounts[index], K[index]);\r\n      }\r\n      else if (index >= 48) {\r\n         g = (7 * index) % 16\r\n         F = ii(a, b, c, d, k[g], rotate_amounts[index], K[index]);\r\n      }\r\n      // actually rotate them\r\n      a = d\r\n      d = c\r\n      c = b\r\n      b = F\r\n      let iterum = {'a': a, 'b': b, 'c': c, 'd': d}\r\n      console.log(iterum)\r\n      yield(iterum)\r\n   }\r\n\r\n   // Make sure the addition always take place in 32 bit space\r\n   x[0] = add32(a, x[0]);\r\n   x[1] = add32(b, x[1]);\r\n   x[2] = add32(c, x[2]);\r\n   x[3] = add32(d, x[3]);\r\n\r\n   // Return happens since the values in x are returned\r\n}\r\n\r\nfunction makeASCII(input) {\r\n   var output = \"\"\r\n   for (var i = 0; i < input.length; i++) {\r\n      output += input[i].charCodeAt(0).toString(2) + \" \";\r\n   }\r\n   return output\r\n}\r\n\r\nvar curHash = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476]\r\n\r\n/**\r\n * About Page Wrapper, relies on React Router for routing to here\r\n */\r\nclass Md5Page extends React.Component {\r\n\r\n   constructor(props) {\r\n      super(props);\r\n      let blocks = makeDisplayBlock(\"\")\r\n      this.state = {\r\n         isToggleOn: true,\r\n         message: \"\",\r\n         result: md5(\"\"),\r\n         ascii: \"\",\r\n         cipher: \"\",\r\n         clear: \"\",\r\n         aCur: hex([curHash[0]]),\r\n         bCur: hex([curHash[1]]),\r\n         cCur: hex([curHash[2]]),\r\n         dCur: hex([curHash[3]]),\r\n         iterator: md5cycleIterations(curHash, blocks[0]), \r\n         iteration: 0,\r\n         encodedPretty: makePretty(blocks),\r\n         encoded: blocks,\r\n         warning: \"\",\r\n         numIteration: 0,\r\n         disableButton: true,\r\n      };\r\n\r\n      this.handleFormUpdate = this.handleFormUpdate.bind(this);\r\n      this.handleClick = this.handleClick.bind(this)\r\n   }\r\n\r\n   handleFormUpdate(e) {\r\n      if(e.target.id === \"EncryptUpdate\") {\r\n         let input = e.target.value\r\n         let blocks = makeDisplayBlock(input)\r\n         let initials = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476]\r\n         this.setState({\r\n            message: input,\r\n            result: md5(input),\r\n            ascii: makeASCII(input),\r\n            encodedPretty: makePretty(blocks),\r\n            encoded: blocks,\r\n            aCur: hex([initials[0]]),\r\n            bCur: hex([initials[1]]),\r\n            cCur: hex([initials[2]]),\r\n            dCur: hex([initials[3]]),\r\n            iterator: md5cycleIterations(curHash, blocks[0]),\r\n            iteration: 0,\r\n            warning: \"\",\r\n            numIteration: 0,\r\n            disableButton: false,\r\n         })\r\n      }\r\n   }\r\n\r\n   handleClick(e) {\r\n      let result = this.state.iterator.next().value\r\n      if (result) {\r\n         if (this.state.numIteration !== 63) {\r\n            this.setState({\r\n               aCur: hex([result['a']]),\r\n               bCur: hex([result['b']]),\r\n               cCur: hex([result['c']]),\r\n               dCur: hex([result['d']]),\r\n               numIteration: this.state.numIteration + 1\r\n            }) \r\n         }\r\n         else{\r\n            result = this.state.iterator.next().value\r\n            let temp = JSON.parse(JSON.stringify(curHash))\r\n            //for(let index = 0; index < 4; index++) {\r\n            //   temp.push(curHash[index])\r\n            //}\r\n            console.log(temp)\r\n            this.setState({\r\n               aCur: hex([temp[0]]),\r\n               bCur: hex([temp[1]]),\r\n               cCur: hex([temp[2]]),\r\n               dCur: hex([temp[3]]),\r\n               numIteration: this.state.numIteration + 1,\r\n               //disableButton: true\r\n            })\r\n         }\r\n         \r\n      }\r\n      else {\r\n         let nextIter = this.state.iteration + 1\r\n         if (nextIter < this.state.encoded.length) {\r\n            console.log(this.state.encoded)\r\n            //console.log(md5cycle(curHash, this.state.encoded[nextIter]))\r\n            //for(let i = 0; i < 4; i++) {\r\n            //   console.log(hex(curHash[i]))\r\n           // }\r\n           //console.log(hex(curHash))\r\n            this.setState({\r\n               iterator: md5cycleIterations(curHash, this.state.encoded[nextIter]),\r\n               iteration: nextIter,\r\n               numIteration: 0,\r\n            })\r\n         }\r\n         else {\r\n            this.setState({\r\n               warning: 'Done Encrypting! Enter a new message to iterate again.',\r\n               disableButton: true\r\n            })\r\n         }\r\n      }\r\n   }\r\n\r\n   render() {\r\n      return (\r\n          <Page title=\"MD5\">\r\n             <p>MD5 (or the Fifth Generation of the Message-Digest Algorithm) is a hashing function that yields a 128-bit hash of any length message.</p>\r\n             <Form>\r\n                <Form.Group controlId=\"EncryptUpdate\">\r\n                   <Form.Label><b>Message</b></Form.Label>\r\n                   <Form.Control type=\"text\" onChange={this.handleFormUpdate} placeholder=\"Message to Encrypt\" />\r\n                   <Form.Text className=\"text-muted\">\r\n                      This is the plain text information you want to share.\r\n                   </Form.Text>\r\n                </Form.Group>\r\n                <p><b>ASCII (bit code) Representation of Your Message</b></p>\r\n                <p>{this.state.ascii}</p>\r\n                <hr/>\r\n                <p><b>Resulting MD5 Hash in Hex</b></p>\r\n                <p>{this.state.result}</p>\r\n                <hr/>\r\n                <p><b>How Does it Work?</b></p>\r\n                <p style={{textAlign: 'left'}}>The MD5 algorithm processes the input variable-length message into a resulting fixed-length hash of 128-bits. As shown below, the input message is broken into sixteen 32-bit words\r\n                   based on its ASCII character codes, making chunks of 512-bit blocks.</p>\r\n                <p>{this.state.encodedPretty}</p>\r\n                <p style={{textAlign: 'left'}}>Then, the message is run through a padding technique in which a single one-bit is appended to the end of the message, followed by as many zeros as necessary\r\n                   to bring the length of the message to 64 bits <i>less than</i> a multiple of 512. Then, the remaining bits are filled up with 64 bits representing the length of the\r\n                   original message, modulo <Latex>{'$$2^{64}$$'}</Latex>. This allows the message's length to be fixed to a multiple of 512, conforming to the encryption length necessary.\r\n                </p>\r\n                <p style={{textAlign: 'left'}}>MD5 initially starts with fixed constants for four 32-bit words, shown below as A, B, C, and D. Each 512-bit message block modifies the state through <i>rounds</i>. Each round\r\n                is composed of 16 similar operations reliant on a non-linear function F, modular addition, and left rotation. Each iteration can be stepped through below showing the modification of\r\n                each of the four 32-bit words, represented in hexadecimal below, until the encryption is complete (after 64 iterations, for a total of 65 iterations):</p>\r\n                {this.state.disableButton && <p><i>In order to demonstrate iterations of the MD5 algorithm, you must have a message to encrypt.</i></p>}\r\n                <Button disabled={this.state.disableButton} variant=\"primary\" onClick={this.handleClick}>Iteration</Button>\r\n                <p>A: {this.state.aCur}</p>\r\n                <p>B: {this.state.bCur}</p>\r\n                <p>C: {this.state.cCur}</p>\r\n                <p>D: {this.state.dCur}</p>\r\n                <p>Iteration: {this.state.numIteration}</p>\r\n                <p>Block Number: {this.state.iteration + 1}</p>\r\n                <p>{this.state.warning}</p>\r\n                <br></br>\r\n                <p style={{textAlign: 'left'}}>The result of the function is output into the <b>B</b> variable each iteration. You can see the rest of the variable values are just circularly\r\n                shifted into the following variable (B into C, C into D, and D into A).</p>\r\n                <p style={{textAlign: 'left'}}>Each MD5 operation utilizes one of four possible bitwise functions, and the function shifts after 16 rounds:</p>\r\n                <Latex>{'$$F(B,C,D)=(B \\\\land C) \\\\lor (\\\\lnot B \\\\land D)$$'}</Latex>\r\n                <br/>\r\n                <Latex>{'$$G(B,C,D)=(B \\\\land D) \\\\lor (C \\\\land \\\\lnot D)$$'}</Latex>\r\n                <br/>\r\n                <Latex>{'$$H(B,C,D)=B \\\\oplus C \\\\oplus D$$'}</Latex>\r\n                <br/>\r\n                <Latex>{'$$I(B,C,D)=C \\\\oplus (B \\\\lor \\\\lnot D)$$'}</Latex>\r\n                <p></p>\r\n\r\n             </Form>\r\n          </Page>\r\n      )\r\n   }\r\n}\r\nexport default Md5Page;\r\n","import React, { Component } from 'react'\r\nimport { Route, Switch, HashRouter } from 'react-router-dom';\r\nimport './App.css';\r\nimport Home from './pages/Home'\r\nimport About from './pages/About'\r\nimport VigenerePage from './pages/vigenere-page'\r\nimport DesPage from './pages/des-page'\r\nimport RsaPage from './pages/rsa-page'\r\nimport Md5Page from './pages/md5-page'\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      login: false,\r\n    };\r\n    this.updateMe = this.updateMe.bind(this)\r\n  }\r\n\r\n  updateMe = (info) => {\r\n    this.setState(info)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <HashRouter basename={process.env.PUBLIC_URL}>\r\n            <Switch>\r\n                <Route exact path=\"/\" component={ Home }/>\r\n                <Route exact path=\"/about\" component={ About }/>\r\n                <Route exact path=\"/Vigenere\" component={ VigenerePage }/>\r\n                <Route exact path=\"/DES\" component={ DesPage }/>\r\n                <Route exact path=\"/RSA\" component={ RsaPage }/>\r\n                <Route exact path=\"/MD5\" component={ Md5Page }/>\r\n                <Route component={Error} />\r\n            </Switch>\r\n          </HashRouter>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  /*\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <HashRouter basename={process.env.PUBLIC_URL}>\r\n            <Switch>\r\n                <Route path=\"/\" exact render={(props) => <Home {...props} info={this.state} updateMe={this.updateMe}/>}/>\r\n                <Route path=\"/about\" render={(props) => <About {...props} info={this.state} updateMe={this.updateMe}/>}/>\r\n                <Route path=\"/Vigenere\" render={(props) => <VigenerePage {...props} info={this.state} updateMe={this.updateMe}/>}/>\r\n                <Route path=\"/DES\" render={(props) => <DesPage {...props} info={this.state} updateMe={this.updateMe}/>}/>\r\n                <Route path=\"/RSA\" render={(props) => <RsaPage {...props} info={this.state} updateMe={this.updateMe}/>}/>\r\n                <Route path=\"/MD5\" render={(props) => <Md5Page {...props} info={this.state} updateMe={this.updateMe}/>}/>\r\n                <Route component={Error} />\r\n            </Switch>\r\n          </HashRouter>\r\n      </div>\r\n    );\r\n  }\r\n  */\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}